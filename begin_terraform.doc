#---------------------------------------------------------------------------------------------------------------------
#	Chapter 01 - Terraform Introduction
#---------------------------------------------------------------------------------------------------------------------
#
# * What is Terrform
# Terraform is a infrastructure provisioning tool which helps to define your infrastructure as a code. 
# Terraform is developed by Hashi Corp and key difference between Terraform and config management tools are they works on top OS leyer to manage OS and application.
# But Terraform works to define your infrastructure as a code. This also helps you to maintain the state of your infrsatructure
#
# You can install a copy of Terraform by following below url https://www.terraform.io/downloads.html
#
# * Hahicorp Configuration Language (Terraform HCL)
# This is the programming language to write manifest in Terraform, This language is called HCL and it posses a declarative nature language. 
# This DSL language is used to create Terraform modules and it has mainly few areas 
#
# - Providers  : This decides what underlying provider should be used for the manifest such as aws, azure, google etc 
# - Variables  : These are types of variables you can define in Terraform
# - Resources  : Resources are resources we are defining to create under the provioder 
# - Outputs    : Return values of a terraform module 
#
# * Key Terraform commands on High Level
#
# $ terraform console 	=> This will open a terraform interactive console 
# $ terraform validate  => This command will help to validate the syntax for terraform code 
# $ terraform init 	=> This will help to download all the modules from Providers such as aws 
# $ terraform plan 	=> This will show based on .tf file what config will be applied 
# $ terraform apply 	=> This apply the manifest as written in the .tf file 
# $ terraform destroy 	=> This command will destroy all infra which is part of the terraform 
#
#---------------------------------------------------------------------------------------------------------------------
#	Chapter 02 - Terraform Variables
#---------------------------------------------------------------------------------------------------------------------
# * Terraform Variable Types
# Terraform mainly has 2 variable types at highr level and they are further devided into few more 
#
# - Simple Variables 
#   . String : To represent strings 
#   . Number : To represent numbers 
#   . Bool   : To represent Boolean values 
#
# Syntax : 
#
# variable "my_varibales" {
#     type = "variable_type"
#     default = "some default value"
# }
#
# Example : Below example shows about Terraform sample string variable 
#
# | [root@minikube01 config]# cat main.tf
# | variable "myvar" {
# |   type = "string"
# |   default = "Hello Terraform"
# | }
# | [root@minikube01 config]# terraform console
# | > Terraform 0.11 and earlier required type constraints to be given in quotes,
# | but that form is now deprecated and will be removed in a future version of
# | Terraform. To silence this warning, remove the quotes around "string".
# |
# | > var.myvar
# | Hello Terraform
# | >
#
# - Complex Variables 
# There are further more complex variable types we will see them in detail now 
#
# . List 
# These are variables which we will be using to represent a list of strings or numbers 
#
# Syntax : 
#
# variable "my_list" {
# 	type = list
# 	default = [value1, value2, value3, etc]
# }
#
# Example : Below example shows how to define a list 
#
# | [root@minikube01 config]# cat   main.tf
# | variable "serial_numbers" {
# |     type = list
# |     default = [1, 2 ,3, 4]
# | }
# | [root@minikube01 config]# terraform console
# | > var.serial_numbers
# | [
# |   1,
# |   2,
# |   3,
# |   4,
# | ]
# | > var.serial_numbers[2]
# | 3
# | >
#
# . Map
# Map is a key value pair similar to a python dictionary, you can define a map as below 
#
# syntax : 
#
# variable "my_variable" {
# 	  type = map(string)
# 	  default = {
# 		key_1 = value_1
# 		key_2 = value_2
# 	  }
# }
#
# Example : Below example shows how to define a variable 
#
# | [root@minikube01 config]# cat  main.tf
# | variable "month_and_weather" {
# |     type = map(string)
# |     default = {
# |             jan = "winter"
#               may = "summer"
# |             jul = "mansoon"
# |     }
# | }
# | [root@minikube01 config]# terraform console
# | > var.month_and_weather["jan"]
# | winter
# | >
# |
#
# NOTE : There are couple of more variables available which are not commnaly used 
#
# Object : Which is simiar to a Map 
# Tuple  : This is simialr to a list but can have multiple different types in it 
#
#
#---------------------------------------------------------------------------------------------------------------------
#	Chapter 03 - Structuring Terraform Variables
#---------------------------------------------------------------------------------------------------------------------
#
# * Why to structure Variables 
# It is not always a best practice to put variables in single file according to the terraform HCL language styling.
# It is good to put the variables under different buckets to define them according to what they are used for.
#
# Example : Below example will show how to structure the variables using Terraform 
# 
# NOTE : As part of creating Examples you might need to get some EC2 AMIs and you can find the details of that at 
# https://cloud-images.ubuntu.com/locator/ec2/
#
# File Structure of the example 
#
# | [root@minikube01 variables_usage]# tree |grep -v state
# | .
# | ├── instance.tf		=> File containe declaration about Resources  
# | ├── provider.tf		=> File Contains the declaration about Provider
# | ├── terraform.tfvars	=> File Contains the keys 
# | └── vars.tf			=> File Contains the variables 
# |
# | 0 directories, 6 files
# | [root@minikube01 variables_usage]#
#
# Details and contents of files 
#
# | [root@minikube01 variables_usage]# more vars.tf 
# | variable "AWS_ACCESS_KEY" {}
# | variable "AWS_SECRET_KEY" {}
# | variable "AWS_REGION" {
# | 	default = "ap-southeast-1"
# | }
# | 
# | variable "AMIS" {
# | 	type = map
# | 	default = {
# | 		us-east-1	= "ami-0022c769"
# | 		ap-southeast-1 	= "ami-01c54eee4ab8725c0"
# | 		ap-southeast-2 	= "ami-02dcae97e96196ef0"
# | 	}
# | }
# | 
# | [root@minikube01 variables_usage]# 
#
#
# | [root@minikube01 variables_usage]# more provider.tf 
# | provider "aws" {
# | 	access_key = "${var.AWS_ACCESS_KEY}"
# | 	secret_key = "${var.AWS_SECRET_KEY}"
# | 	region = "${var.AWS_REGION}"
# | }
# | [root@minikube01 variables_usage]# 
# | [root@minikube01 variables_usage]# more vars.tf 
# | variable "AWS_ACCESS_KEY" {}
# | variable "AWS_SECRET_KEY" {}
# | variable "AWS_REGION" {
# | 	default = "ap-southeast-1"
# | }
# | 
# | variable "AMIS" {
# | 	type = map
# | 	default = {
# | 		us-east-1	= "ami-0022c769"
# | 		ap-southeast-1 	= "ami-01c54eee4ab8725c0"
# | 		ap-southeast-2 	= "ami-02dcae97e96196ef0"
# | 	}
# | }
# | 
# | [root@minikube01 variables_usage]# 
#
#
# | [root@minikube01 variables_usage]# more terraform.tfvars 
# | AWS_ACCESS_KEY = "xxxxxxxxxxxxxxxxxxxxxx"
# | AWS_SECRET_KEY = "xxxxxxxxxxxxxxxxxxxxxx"
# | [root@minikube01 variables_usage]# 
#
#
#
# | [root@minikube01 variables_usage]# 
# | [root@minikube01 variables_usage]# more provider.tf 
# | provider "aws" {
# | 	access_key = "${var.AWS_ACCESS_KEY}"
# | 	secret_key = "${var.AWS_SECRET_KEY}"
# | 	region = "${var.AWS_REGION}"
# | }
# | [root@minikube01 variables_usage]# 
# | [root@minikube01 variables_usage]# more instance.tf 
# | resource "aws_instance" "example" {
# | 	ami		= "${lookup(var.AMIS, var.AWS_REGION)}"
# | 	instance_type 	= "t2.micro"
# | }
# | [root@minikube01 variables_usage]# 
# | 
#
#
# | [root@minikube01 variables_usage]# terraform plan
# | Refreshing Terraform state in-memory prior to plan...
# | The refreshed state will be used to calculate this plan, but will not be
# | persisted to local or remote state storage.
# | 
# | 
# | ------------------------------------------------------------------------
# | 
# | An execution plan has been generated and is shown below.
# | Resource actions are indicated with the following symbols:
# |   + create
# | 
# | Terraform will perform the following actions:
# | 
# |   # aws_instance.example will be created
# |   + resource "aws_instance" "example" {
# |       + ami                          = "ami-01c54eee4ab8725c0"
# |       + arn                          = (known after apply)
# |       + associate_public_ip_address  = (known after apply)
# |       + availability_zone            = (known after apply)
# |       + cpu_core_count               = (known after apply)
# |       + cpu_threads_per_core         = (known after apply)
# |       + get_password_data            = false
# |       + host_id                      = (known after apply)
# |       + id                           = (known after apply)
# |       + instance_state               = (known after apply)
# |       + instance_type                = "t2.micro"
# |       + ipv6_address_count           = (known after apply)
# |       + ipv6_addresses               = (known after apply)
# |       + key_name                     = (known after apply)
# |       + network_interface_id         = (known after apply)
# |       + password_data                = (known after apply)
# |       + placement_group              = (known after apply)
# |       + primary_network_interface_id = (known after apply)
# |       + private_dns                  = (known after apply)
# |       + private_ip                   = (known after apply)
# |       + public_dns                   = (known after apply)
# |       + public_ip                    = (known after apply)
# |       + security_groups              = (known after apply)
# |       + source_dest_check            = true
# |       + subnet_id                    = (known after apply)
# |       + tenancy                      = (known after apply)
# |       + volume_tags                  = (known after apply)
# |       + vpc_security_group_ids       = (known after apply)
# | 
# |       + ebs_block_device {
# |           + delete_on_termination = (known after apply)
# |           + device_name           = (known after apply)
# |           + encrypted             = (known after apply)
# |           + iops                  = (known after apply)
# |           + kms_key_id            = (known after apply)
# |           + snapshot_id           = (known after apply)
# |           + volume_id             = (known after apply)
# |           + volume_size           = (known after apply)
# |           + volume_type           = (known after apply)
# |         }
# | 
# |       + ephemeral_block_device {
# |           + device_name  = (known after apply)
# |           + no_device    = (known after apply)
# |           + virtual_name = (known after apply)
# |         }
# | 
# |       + metadata_options {
# |           + http_endpoint               = (known after apply)
# |           + http_put_response_hop_limit = (known after apply)
# |           + http_tokens                 = (known after apply)
# |         }
# | 
# |       + network_interface {
# |           + delete_on_termination = (known after apply)
# |           + device_index          = (known after apply)
# |           + network_interface_id  = (known after apply)
# |         }
# | 
# |       + root_block_device {
# |           + delete_on_termination = (known after apply)
# |           + device_name           = (known after apply)
# |           + encrypted             = (known after apply)
# |           + iops                  = (known after apply)
# |           + kms_key_id            = (known after apply)
# |           + volume_id             = (known after apply)
# |           + volume_size           = (known after apply)
# |           + volume_type           = (known after apply)
# |         }
# |     }
# | 
# | Plan: 1 to add, 0 to change, 0 to destroy.
# | 
# | Warning: Interpolation-only expressions are deprecated
# | 
# |   on instance.tf line 2, in resource "aws_instance" "example":
# |    2: 	ami		= "${lookup(var.AMIS, var.AWS_REGION)}"
# | 
# | Terraform 0.11 and earlier required all non-constant expressions to be
# | provided via interpolation syntax, but this pattern is now deprecated. To
# | silence this warning, remove the "${ sequence from the start and the }"
# | sequence from the end of this expression, leaving just the inner expression.
# | 
# | Template interpolation syntax is still used to construct strings from
# | expressions when the template includes multiple interpolation sequences or a
# | mixture of literal strings and interpolations. This deprecation applies only
# | to templates that consist entirely of a single interpolation sequence.
# | 
# | (and 3 more similar warnings elsewhere)
# | 
# | 
# | ------------------------------------------------------------------------
# | 
# | Note: You didn't specify an "-out" parameter to save this plan, so Terraform
# | can't guarantee that exactly these actions will be performed if
# | "terraform apply" is subsequently run.
# | [root@minikube01 variables_usage]#
# | 
# | 
# | [root@minikube01 variables_usage]# terraform apply
# | 
# | An execution plan has been generated and is shown below.
# | Resource actions are indicated with the following symbols:
# |   + create
# | 
# | Terraform will perform the following actions:
# | 
# |   # aws_instance.example will be created
# |   + resource "aws_instance" "example" {
# |       + ami                          = "ami-01c54eee4ab8725c0"
# |       + arn                          = (known after apply)
# |       + associate_public_ip_address  = (known after apply)
# |       + availability_zone            = (known after apply)
# |       + cpu_core_count               = (known after apply)
# |       + cpu_threads_per_core         = (known after apply)
# |       + get_password_data            = false
# |       + host_id                      = (known after apply)
# |       + id                           = (known after apply)
# |       + instance_state               = (known after apply)
# |       + instance_type                = "t2.micro"
# |       + ipv6_address_count           = (known after apply)
# |       + ipv6_addresses               = (known after apply)
# |       + key_name                     = (known after apply)
# |       + network_interface_id         = (known after apply)
# |       + password_data                = (known after apply)
# |       + placement_group              = (known after apply)
# |       + primary_network_interface_id = (known after apply)
# |       + private_dns                  = (known after apply)
# |       + private_ip                   = (known after apply)
# |       + public_dns                   = (known after apply)
# |       + public_ip                    = (known after apply)
# |       + security_groups              = (known after apply)
# |       + source_dest_check            = true
# |       + subnet_id                    = (known after apply)
# |       + tenancy                      = (known after apply)
# |       + volume_tags                  = (known after apply)
# |       + vpc_security_group_ids       = (known after apply)
# | 
# |       + ebs_block_device {
# |           + delete_on_termination = (known after apply)
# |           + device_name           = (known after apply)
# |           + encrypted             = (known after apply)
# |           + iops                  = (known after apply)
# |           + kms_key_id            = (known after apply)
# |           + snapshot_id           = (known after apply)
# |           + volume_id             = (known after apply)
# |           + volume_size           = (known after apply)
# |           + volume_type           = (known after apply)
# |         }
# | 
# |       + ephemeral_block_device {
# |           + device_name  = (known after apply)
# |           + no_device    = (known after apply)
# |           + virtual_name = (known after apply)
# |         }
# | 
# |       + metadata_options {
# |           + http_endpoint               = (known after apply)
# |           + http_put_response_hop_limit = (known after apply)
# |           + http_tokens                 = (known after apply)
# |         }
# | 
# |       + network_interface {
# |           + delete_on_termination = (known after apply)
# |           + device_index          = (known after apply)
# |           + network_interface_id  = (known after apply)
# |         }
# | 
# |       + root_block_device {
# |           + delete_on_termination = (known after apply)
# |           + device_name           = (known after apply)
# |           + encrypted             = (known after apply)
# |           + iops                  = (known after apply)
# |           + kms_key_id            = (known after apply)
# |           + volume_id             = (known after apply)
# |           + volume_size           = (known after apply)
# |           + volume_type           = (known after apply)
# |         }
# |     }
# | 
# | Plan: 1 to add, 0 to change, 0 to destroy.
# | 
# | 
# | Warning: Interpolation-only expressions are deprecated
# | 
# |   on instance.tf line 2, in resource "aws_instance" "example":
# |    2: 	ami		= "${lookup(var.AMIS, var.AWS_REGION)}"
# | 
# | Terraform 0.11 and earlier required all non-constant expressions to be
# | provided via interpolation syntax, but this pattern is now deprecated. To
# | silence this warning, remove the "${ sequence from the start and the }"
# | sequence from the end of this expression, leaving just the inner expression.
# | 
# | Template interpolation syntax is still used to construct strings from
# | expressions when the template includes multiple interpolation sequences or a
# | mixture of literal strings and interpolations. This deprecation applies only
# | to templates that consist entirely of a single interpolation sequence.
# | 
# | (and 3 more similar warnings elsewhere)
# | 
# | Do you want to perform these actions?
# |   Terraform will perform the actions described above.
# |   Only 'yes' will be accepted to approve.
# | 
# |   Enter a value: yes
# | 
# | aws_instance.example: Creating...
# | aws_instance.example: Still creating... [10s elapsed]
# | aws_instance.example: Creation complete after 16s [id=i-0ece39df4c66ad237]
# | 
# | Apply complete! Resources: 1 added, 0 changed, 0 destroyed.
# | [root@minikube01 variables_usage]# 
# | 
# | 
# | 
# | [root@minikube01 variables_usage]# terraform destroy
# | aws_instance.example: Refreshing state... [id=i-0ece39df4c66ad237]
# | 
# | An execution plan has been generated and is shown below.
# | Resource actions are indicated with the following symbols:
# |   - destroy
# | 
# | Terraform will perform the following actions:
# | 
# |   # aws_instance.example will be destroyed
# |   - resource "aws_instance" "example" {
# |       - ami                          = "ami-01c54eee4ab8725c0" -> null
# |       - arn                          = "arn:aws:ec2:ap-southeast-1:071382833206:instance/i-0ece39df4c66ad237" -> null
# |       - associate_public_ip_address  = true -> null
# |       - availability_zone            = "ap-southeast-1b" -> null
# |       - cpu_core_count               = 1 -> null
# |       - cpu_threads_per_core         = 1 -> null
# |       - disable_api_termination      = false -> null
# |       - ebs_optimized                = false -> null
# |       - get_password_data            = false -> null
# |       - hibernation                  = false -> null
# |       - id                           = "i-0ece39df4c66ad237" -> null
# |       - instance_state               = "running" -> null
# |       - instance_type                = "t2.micro" -> null
# |       - ipv6_address_count           = 0 -> null
# |       - ipv6_addresses               = [] -> null
# |       - monitoring                   = false -> null
# |       - primary_network_interface_id = "eni-04c96eeff346f89c6" -> null
# |       - private_dns                  = "ip-172-31-24-219.ap-southeast-1.compute.internal" -> null
# |       - private_ip                   = "172.31.24.219" -> null
# |       - public_dns                   = "ec2-52-74-228-143.ap-southeast-1.compute.amazonaws.com" -> null
# |       - public_ip                    = "52.74.228.143" -> null
# |       - security_groups              = [
# |           - "default",
# |         ] -> null
# |       - source_dest_check            = true -> null
# |       - subnet_id                    = "subnet-6713d201" -> null
# |       - tags                         = {} -> null
# |       - tenancy                      = "default" -> null
# |       - volume_tags                  = {} -> null
# |       - vpc_security_group_ids       = [
# |           - "sg-dc7bd0af",
# |         ] -> null
# | 
# |       - credit_specification {
# |           - cpu_credits = "standard" -> null
# |         }
# | 
# |       - metadata_options {
# |           - http_endpoint               = "enabled" -> null
# |           - http_put_response_hop_limit = 1 -> null
# |           - http_tokens                 = "optional" -> null
# |         }
# | 
# |       - root_block_device {
# |           - delete_on_termination = true -> null
# |           - device_name           = "/dev/sda1" -> null
# |           - encrypted             = false -> null
# |           - iops                  = 100 -> null
# |           - volume_id             = "vol-0f93927ade83ea44a" -> null
# |           - volume_size           = 8 -> null
# |           - volume_type           = "gp2" -> null
# |         }
# |     }
# | 
# | Plan: 0 to add, 0 to change, 1 to destroy.
# | 
# | 
# | Warning: Interpolation-only expressions are deprecated
# | 
# |   on instance.tf line 2, in resource "aws_instance" "example":
# |    2: 	ami		= "${lookup(var.AMIS, var.AWS_REGION)}"
# | 
# | Terraform 0.11 and earlier required all non-constant expressions to be
# | provided via interpolation syntax, but this pattern is now deprecated. To
# | silence this warning, remove the "${ sequence from the start and the }"
# | sequence from the end of this expression, leaving just the inner expression.
# | 
# | Template interpolation syntax is still used to construct strings from
# | expressions when the template includes multiple interpolation sequences or a
# | mixture of literal strings and interpolations. This deprecation applies only
# | to templates that consist entirely of a single interpolation sequence.
# | 
# | (and 3 more similar warnings elsewhere)
# | 
# | Do you really want to destroy all resources?
# |   Terraform will destroy all your managed infrastructure, as shown above.
# |   There is no undo. Only 'yes' will be accepted to confirm.
# | 
# |   Enter a value: yes
# | 
# | aws_instance.example: Destroying... [id=i-0ece39df4c66ad237]
# | aws_instance.example: Still destroying... [id=i-0ece39df4c66ad237, 10s elapsed]
# | aws_instance.example: Destruction complete after 20s
# | 
# | Destroy complete! Resources: 1 destroyed.
# | [root@minikube01 variables_usage]# 
# | 
# | 
# | 
