#---------------------------------------------------------------------------------------------
#  Chapter 01 - Introduction to Docker
#---------------------------------------------------------------------------------------------
# * Install Docker
# You can install Docker by install below two packages 
# | 
# | [root@dockerstation01 ~]# rpm -qa| grep -i docker
# | [root@dockerstation01 ~]# rpm -qa| grep -i docker
# | docker-ce-cli-18.09.6-3.el7.x86_64
# | docker-ce-18.09.1-3.el7.x86_64
# | [root@dockerstation01 ~]#
# | 
#
# * Verify the installation 
# You can verify the instllation of docker server and client by running below command 
# | 
# | [root@dockerstation01 ~]# docker version
# | Client:
# |  Version:           18.09.6
# |  API version:       1.39
# |  Go version:        go1.10.8
# |  Git commit:        481bc77156
# |  Built:             Sat May  4 02:34:58 2019
# |  OS/Arch:           linux/amd64
# |  Experimental:      false
# |
# | Server: Docker Engine - Community
# |  Engine:
# |   Version:          18.09.1
# |   API version:      1.39 (minimum version 1.12)
# |   Go version:       go1.10.6
# |   Git commit:       4c52b90
# |   Built:            Wed Jan  9 19:06:30 2019
# |   OS/Arch:          linux/amd64
# |   Experimental:     false
# | [root@dockerstation01 ~]#
# |
#
# * How to start a container 
# To start a container you will need to run the 'docker run' command. When you start a container there are few steps happens in the background 
#
# Syntax : docker run <image_name>
#
# Below are few steps which is outlined in the chronological order while running a docker run command 
#
# 1. When you run the command docker client contacts the docker server for image location
# 2. Then Docker server verifies the image in its cache, if its available it helps to start the image from the cache
# 3. Incase there is no cache available then it forwards the requst to container image repository "Docker Hub'
# 4. It checks for the image in the docker hub and then pulls that image int0 local repository or cache 
# 5. Then docker client will start the container from the image which has downloaded.
#
# Example : Below is an example to start a 'hello-world' program. 
#
# | [root@dockerstation01 ~]# docker run hello-world
# |
# | Hello from Docker!
# | This message shows that your installation appears to be working correctly.
# |
# | To generate this message, Docker took the following steps:
# |  1. The Docker client contacted the Docker daemon.
# |  2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
# |     (amd64)
# |  3. The Docker daemon created a new container from that image which runs the
# |     executable that produces the output you are currently reading.
# |  4. The Docker daemon streamed that output to the Docker client, which sent it
# |     to your terminal.
# |
# | To try something more ambitious, you can run an Ubuntu container with:
# |  $ docker run -it ubuntu bash
# |
# | Share images, automate workflows, and more with a free Docker ID:
# |  https://hub.docker.com/
# |
# | For more examples and ideas, visit:
# |  https://docs.docker.com/get-started/
# |
# | [root@dockerstation01 ~]#
# |
# NOTE : Below tutorial will explain about how docker run works
# https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436626?start=79#bookmarks
#
#
# * What happens when you install docker container
# When you install docker container there will be a Linux virtual machine gets installed in the background which acts as the Docker Server
# You can see docker server operating system details in the 'docker version' command to verify this. 
# Any container process which runs will be from this container, this will be true regardless the underlying OS is Linux, Windows or Mac.
#
# Docker installation layering is done like below. 
# - Underlying Operating system (Windows / Linux / Mac)
# - Docker Server Linux VM gets created on top of the OS 
# - Docker contaner process running inside the Docker Server Linux VM
#
# NOTE : Udemy Detailed Tutorial on the Docker layers and how its works 
# https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436636?start=1#bookmarks
#
#
# * What is a Docker Image and container
# Docker image is a collection of software and filesystem snapshot along with a set of steps which can be used to startup a container.
# Container is a set of process which spins up with the instruction given from the docker images
# 
# NOTE : Below udemy tutorial gives a complete details about container image. 
# https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436632?start=422#bookmarks 
#
# 
# * What is namespacing and cgroups
# namespacing - namespacing a Linux feature which allows to isolate resourse per processs or group of process 
# cgroups     - cgroups also a Linux feature which limit the amount of resources used per process 
#
# NOTE : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436636?start=63#bookmarks
#
#---------------------------------------------------------------------------------------------
#  Chapter 02 - Manipulating a docker Container
#---------------------------------------------------------------------------------------------
#
# * Executing commands in Container 
# When you are running a command insider a docker container that will work only if that contaner image contains that commands embedded inside. 
# If the container image is not embedded with the commands then the command won't work 
#
# Examples : Below are two instances where the same command behave in different while executing in two different containers
#
# | [root@dockerstation01 ~]# docker run hello-world uptime
# | docker: Error response from daemon: OCI runtime create failed: container_linux.go:348: starting container process caused "exec: \"uptime\": executable file not found in $PATH": unknown.
# | [root@dockerstation01 ~]# docker run busybox uptime
# |  23:26:30 up  1:53,  0 users,  load average: 0.07, 0.02, 0.01
# | [root@dockerstation01 ~]# 
#
# Note : Here uptime command was not embedded in the 'hello-world' image where its available in 'busybox' 
#
# To run a command in a docker container you will need to follow below syntax 
#
# syntax : docker run <image> <command>
#
# * ps command
# This command can be used to find the list of running continers. 
# When you add '--all' parameter to the command then its going to give the details about all the commands ran in the past
#
# Syntax : docker ps 
#        : docker ps --all
#
# Example : Running the command to show currently running containers
#
# | [root@dockerstation01 ~]# docker ps 
# | CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
# | 3d488796f6ab        busybox             "top"               6 seconds ago       Up 4 seconds                            optimistic_mahavira
# | [root@dockerstation01 ~]# 
#
# Example : Running the command to show the history of all containers 
#
# | [root@dockerstation01 ~]# docker ps --all
# | CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                        PORTS               NAMES
# | 3d488796f6ab        busybox             "top"                    About a minute ago   Up About a minute                                 optimistic_mahavira
# | ce70ccd4eaba        busybox             "uptime"                 7 minutes ago        Exited (0) 7 minutes ago                          blissful_fermat
# | 9e3a5166cd32        hello-world         "uptime"                 7 minutes ago        Created                                           sleepy_babbage
# | df515bd2bc4a        busybox             "ls etc"                 19 minutes ago       Exited (0) 19 minutes ago                         romantic_goldberg
# | 7b6d14cdc48c        busybox             "ls"                     19 minutes ago       Exited (0) 19 minutes ago                         focused_kapitsa
# | 1af30959d59f        busybox             "systemctl -a"           19 minutes ago       Created                                           epic_beaver
# | 4356fa5da624        busybox             "uname -a"               19 minutes ago       Exited (0) 19 minutes ago                         reverent_wu
# | feec6f069754        busybox             "cat /etc/redhat-rel…"   20 minutes ago       Exited (1) 20 minutes ago                         festive_edison
# | bbfc0aaa39d9        busybox             "uname -r"               20 minutes ago       Exited (0) 20 minutes ago                         eloquent_noyce
# | cbbe3a745190        busybox             "top"                    20 minutes ago       Exited (130) 20 minutes ago                       elegant_banzai
# | dd4a37b07df2        busybox             "ping yahoo.com"         20 minutes ago       Exited (1) 20 minutes ago                         xenodochial_cori
# | 188cf85a7b3f        busybox             "ping google.com"        21 minutes ago       Exited (1) 20 minutes ago                         sad_shockley
# | e875caa538be        busybox             "ping"                   21 minutes ago       Exited (1) 21 minutes ago                         peaceful_snyder
# | 5f88bfa642d2        busybox             "uptime"                 22 minutes ago       Exited (0) 22 minutes ago                         hopeful_payne
# | 486ffb75e744        busybox             "sh"                     22 minutes ago       Exited (0) 22 minutes ago                         hopeful_heyrovsky
# | dd0a1203e18c        hello-world         "uptime"                 31 minutes ago       Created                                           pedantic_jackson
# | f7dfeb40ecde        hello-world         "ls"                     31 minutes ago       Created                                           compassionate_fermi
# | 9b7a8dc92eff        hello-world         "/hello"                 2 hours ago          Exited (0) 2 hours ago                            festive_colden
# | 64392280e628        hello-world         "/hello"                 2 weeks ago          Exited (0) 2 weeks ago                            sleepy_sinoussi
# | 779c5c963c0c        hello-world         "/hello"                 2 weeks ago          Exited (0) 2 weeks ago                            clever_heyrovsky
# | [root@dockerstation01 ~]#
# |
#
# * Understanding the docker run 
# When you are invoking the docker run command it actually a combination of docker create and docker start commands. 
#
# docker run = docker create <image_name> + docker run <container ID>
#
# * Docker create 
# Docker create will help you to create a writable container from a container image. 
# This is useful when you want to create a container with some specific command which need to be in a ready to create state later. 
# Once you create the container the container state will be in the "Created" status. 
#
# Syntax : docker create <image_name>
#
# Example : Below example is to create a fedora container
#
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker create ubuntu
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | Trying to pull registry.redhat.io/ubuntu:latest...Failed
# | Trying to pull quay.io/ubuntu:latest...Failed
# | Trying to pull docker.io/ubuntu:latest...Getting image source signatures
# | Copying blob 6abc03819f3e: 27.52 MiB / 27.52 MiB [==========================] 1s
# | Copying blob 05731e63f211: 844 B / 844 B [==================================] 1s
# | Copying blob 0bd67c50d6be: 164 B / 164 B [==================================] 1s
# | Copying config 7698f282e524: 3.27 KiB / 3.27 KiB [==========================] 0s
# | Writing manifest to image destination
# | Storing signatures
# | 348902c0561cc725828c4f79a7206cd19d6a3789567f158043aedb0610d6aa50
# | [ec2-user@ip-172-31-21-124 ~]$
# |
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND    CREATED        STATUS                 PORTS  NAMES
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash  3 seconds ago  Created                       gifted_booth  --> You can see the container in the Created State
# | 779800ec7966  docker.io/library/busybox:latest      sh         2 days ago     Exited (0) 2 days ago         admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello     2 days ago     Exited (0) 2 days ago         kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# |
#
# Detail Tutoroial : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436650?start=79#bookmarks
#
# * Docker start
# Docker start will help you to start the container which is already  created. 
# This will be useful when you want to start a conatiner again and again which is already created 
#
# Syntax : docker start [-a] <container_ID>
#
# If you are using "-a" string then it will attach the startingh output to the terminal, i.e STDOUT, STDERR and forward will be printed on the console 
#
# Example : Below is an example for starting a container which is already created 
#
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker create ubuntu uptime
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | fc4f9980fe0addc25a7584f360a6dc82a0fefa9433ff8b0ea9e970da935ca33d
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND    CREATED         STATUS                         PORTS  NAMES
# | fc4f9980fe0a  docker.io/library/ubuntu:latest       uptime     3 seconds ago   Created                               admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash  10 minutes ago  Exited (0) About a minute ago         gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest      sh         2 days ago      Exited (0) 2 days ago                 admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello     2 days ago      Exited (0) 2 days ago                 kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker start -a fc4f9980fe0a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# |  00:36:39 up 2 days, 37 min,  0 users,  load average: 0.05, 0.06, 0.02
# | [ec2-user@ip-172-31-21-124 ~]$
#
# * Restarting a container 
# When a container is exited then it doesnot mean that it is dead or it cannot be started again 
# You can always restart the same container using the docker start method which will help you to re-issue the same default command. 
# Kindly note when you are starting an exited container you won't be able to attach or trigger new commands to it, it will only pick the default command
#
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND    CREATED         STATUS                     PORTS  NAMES
# | fc4f9980fe0a  docker.io/library/ubuntu:latest       uptime     19 minutes ago  Exited (0) 19 minutes ago         admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash  30 minutes ago  Exited (0) 21 minutes ago         gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest      sh         2 days ago      Exited (0) 2 days ago             admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello     2 days ago      Exited (0) 2 days ago             kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker start -a fc4f9980fe0a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# |  00:56:26 up 2 days, 57 min,  0 users,  load average: 0.00, 0.00, 0.00
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker start -a fc4f9980fe0a ls			-> Note that same container doesnot allow to override the default command
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | you cannot start and attach multiple containers at once
# | [ec2-user@ip-172-31-21-124 ~]$
# |
#
# Detail Tutorial : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436652?start=139#bookmarks
#
# * How to delete a container
# If you no longer need the container instance then you can delete them by using 'docker rm' or 'docker system prune' command 
#
# Syntax : docker rm [conatiner_ID | all]
# Syntax : docker system prune           --> This will delete all containers 
#
# | [ec2-user@ip-172-31-21-124 ~]$ docker ps --all
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                             COMMAND  CREATED            STATUS                        PORTS  NAMES
# | f1beb2b1f2db  docker.io/library/busybox:latest  uptime   About an hour ago  Exited (0) About an hour ago         suspicious_wiles
# | d782303fb193  docker.io/library/busybox:latest  uptime   About an hour ago  Exited (0) About an hour ago         priceless_darwin
# | 70cf55e7554e  docker.io/library/busybox:latest  sh       About an hour ago  Exited (0) About an hour ago         gracious_hamilton
# | 839d4ec68f32  docker.io/library/busybox:latest  sh       About an hour ago  Created                              optimistic_khorana
# | ac96670a3ff1  docker.io/library/busybox:latest  uptime   2 hours ago        Exited (0) 2 hours ago               pedantic_shirley
# | db8671b4bc4f  docker.io/library/busybox:latest  ls       2 hours ago        Exited (0) 2 hours ago               cocky_clarke
# | a7bce2f35192  docker.io/library/busybox:latest  ls       2 hours ago        Exited (0) 2 hours ago               vigorous_bassi
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ docker rm f1beb2b1f2db                           --> Deleteing only one Container
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | f1beb2b1f2db4040ea21e964999f706c932de4b76baef80b86f149e4866ccf63
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ docker rm --all				    --> Deleting all containers 
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | 70cf55e7554edaa85ba8c6eb2ffa05c545b83491355ee48701d47f4bcb56ca9f
# | ac96670a3ff19ac728ee0739333198de315ab3feed187d43f1f8da1cc2848e10
# | 839d4ec68f32dfe7d18e75e5ffa6fec6f176e8357770c4c938ae1531d357f31b
# | a7bce2f3519201c38bf07211a8248d131e96d475641ca4d4523dff532b915989
# | d782303fb1936afd32f9216c0255c702dca3cd5b4c10131558dd22c0db9e9c37
# | db8671b4bc4f9eaf5f119cca11823fa898c08a096e683c4b091e22f284710f07
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ docker ps --all
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE  COMMAND  CREATED  STATUS  PORTS  NAMES
# | [ec2-user@ip-172-31-21-124 ~]$
# |
#
# * Logs in docker 
# You can checks the logs from a container using the docker logs command
#
# Syntax : docker logs <conatiner_ID>
#
# Example: Below example show how to get the logs for a specific container 
#
# |
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps --all
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND    CREATED            STATUS                        PORTS  NAMES
# | fc4f9980fe0a  docker.io/library/ubuntu:latest       uptime     About an hour ago  Exited (0) 25 minutes ago            admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash  About an hour ago  Exited (0) About an hour ago         gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest      sh         2 days ago         Exited (0) 2 days ago                admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello     2 days ago         Exited (0) 2 days ago                kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker logs fc4f9980fe0a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# |  00:36:39 up 2 days, 37 min,  0 users,  load average: 0.05, 0.06, 0.02
# |  00:56:26 up 2 days, 57 min,  0 users,  load average: 0.00, 0.00, 0.00
# | [ec2-user@ip-172-31-21-124 ~]$
# |
# 
# * Stopping a container 
# To stop a running container you have two methods either you can use the 'stop' method you can use the 'kill' method.
# Stop - This is a graceful method where issuing the kill method it wait for some seconds so that continer has bring down the process
# Kill - This method will immedietely issue the sigterm signal to kill the container 
#
# Syntax : docker stop <Container_ID>
#        : docker kill <Container_ID>
#
# Example : Below example will show us about killing the docker container 
# 
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker create busybox ping google.com			--> Creating a long running container
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | 0c1192c600ae61e1a825cb0fb03f1ec7f5939d6d5e3881c2697cf20af9bcae25
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND          CREATED        STATUS                   PORTS  NAMES
# | 0c1192c600ae  docker.io/library/busybox:latest      ping google.com  3 seconds ago  Created                         friendly_lamport	--> Created 
# | fc4f9980fe0a  docker.io/library/ubuntu:latest       uptime           24 hours ago   Exited (0) 23 hours ago         admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash        24 hours ago   Exited (0) 24 hours ago         gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest      sh               3 days ago     Exited (0) 3 days ago           admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello           3 days ago     Exited (0) 3 days ago           kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker start 0c1192c600ae										--> Starting 
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | 0c1192c600ae
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND          CREATED         STATUS                   PORTS  NAMES
# | 0c1192c600ae  docker.io/library/busybox:latest      ping google.com  40 seconds ago  Up 26 seconds ago               friendly_lamport	--> up and running 
# | fc4f9980fe0a  docker.io/library/ubuntu:latest       uptime           24 hours ago    Exited (0) 23 hours ago         admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash        24 hours ago    Exited (0) 24 hours ago         gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest      sh               3 days ago      Exited (0) 3 days ago           admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello           3 days ago      Exited (0) 3 days ago           kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker stop 0c1192c600ae										--> graceful shutdown
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | 0c1192c600ae61e1a825cb0fb03f1ec7f5939d6d5e3881c2697cf20af9bcae25
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker start 0c1192c600ae
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | 0c1192c600ae
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker kill 0c1192c600ae										--> Killed immedietely 
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | 0c1192c600ae61e1a825cb0fb03f1ec7f5939d6d5e3881c2697cf20af9bcae25
# | [ec2-user@ip-172-31-21-124 ~]$
# |
#
# Udemy Detailed : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436664?start=96#bookmarks
#
# * How to run a command inside a container 
# While a container is running there will be requirement for you to run the commands and fetch output from them. 
# While you ran the command it will interact with the container and then it will provide the output from the container. 
# When you try to ran an output from the command, then you will need to provide container id to fatch the output 
#
# Syntax : docker exec -it <Container_ID> <command>
#
# Example : Below command will help you to fetch uptime from a running container 
#
# | ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND          CREATED         STATUS                         PORTS  NAMES
# | 0c1192c600ae  docker.io/library/busybox:latest      ping google.com  21 minutes ago  Exited (137) 19 minutes ago           friendly_lamport
# | fc4f9980fe0a  docker.io/library/ubuntu:latest       uptime           24 hours ago    Exited (0) 24 hours ago               admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash        24 hours ago    Exited (0) About a minute ago         gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest      sh               3 days ago      Exited (0) 3 days ago                 admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello           3 days ago      Exited (0) 3 days ago                 kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker start 0c1192c600ae
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | 0c1192c600ae
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker exec -it 0c1192c600ae uptime
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# |  00:28:51 up 3 days, 29 min,  0 users,  load average: 0.00, 0.00, 0.00
# | [ec2-user@ip-172-31-21-124 ~]$
#
# NOTE : Here "-it' flag which we have used is important, reason is it helps  us to interact with the contaciner in a ternimal
# -i  : This means attch my terminal to container while running the comamnds 
# -t  : this means output should be printed in a nice terminal format
#
# * How to launch a shell insider a container
# Instead of running command all the time using 'exec' method you can always launch a shell in container. 
# You can launch the shell with 'sh' or 'zsh' along with the exec input for command. 
#
# Syntax : docker exec -it <container_id> [sh | zsh]
#
# Example : Below command will launch a shell 
#
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                             COMMAND          CREATED       STATUS           PORTS  NAMES
# | 0c1192c600ae  docker.io/library/busybox:latest  ping google.com  23 hours ago  Up 23 hours ago         friendly_lamport
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker exec -it 0c1192c600ae sh
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | / # uname -a
# | Linux 0c1192c600ae 4.18.0-80.el8.x86_64 #1 SMP Wed Mar 13 12:02:46 UTC 2019 x86_64 GNU/Linux
# | / # more /etc/
# | group        hostname     hosts        localtime    network/     passwd       resolv.conf  shadow
# | / # ls
# | bin   dev   etc   home  proc  root  run   sys   tmp   usr   var
# | / # exit
# | [ec2-user@ip-172-31-21-124 ~]$
# |
#
# * How to start a container with a shell 
# You can always launch a container with a shell by attaching the 'sh' command with '-it' flag while running the container
# The downside for this approach will be you will be only running that shell with the container and there won't be any apps running 
# As soon as you exit the shell it will terminate the session. 
#
# Syntax : docker run -it <image_name> sh
#
# Example : below example will show you how to launch a shell 
#
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND               CREATED       STATUS                     PORTS  NAMES
# | 1016f0da1363  docker.io/library/mariadb:10.3        docker-entrypoint...  22 hours ago  Exited (1) 10 minutes ago         xenodochial_euler
# | 0c1192c600ae  docker.io/library/busybox:latest      ping google.com       23 hours ago  Up 23 hours ago                   friendly_lamport
# | fc4f9980fe0a  docker.io/library/ubuntu:latest       uptime                47 hours ago  Exited (0) 47 hours ago           admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash             47 hours ago  Exited (0) 23 hours ago           gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest      sh                    3 days ago    Exited (0) 3 days ago             admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello                3 days ago    Exited (0) 3 days ago             kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker run -i -t busybox sh
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | / #
# | / #
# | / # pwd
# | /
# | / # ls
# | bin   dev   etc   home  proc  root  run   sys   tmp   usr   var
# | / # ls /var
# | spool  www
# | / # ls /etc/init.d
# | ls: /etc/init.d: No such file or directory
# | / # exit
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND               CREATED         STATUS                     PORTS  NAMES
# | cc80521b1b45  docker.io/library/busybox:latest      sh                    54 seconds ago  Exited (1) 18 seconds ago         nervous_turing
# | 1016f0da1363  docker.io/library/mariadb:10.3        docker-entrypoint...  22 hours ago    Exited (1) 11 minutes ago         xenodochial_euler
# | 0c1192c600ae  docker.io/library/busybox:latest      ping google.com       23 hours ago    Up 23 hours ago                   friendly_lamport
# | fc4f9980fe0a  docker.io/library/ubuntu:latest       uptime                47 hours ago    Exited (0) 47 hours ago           admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash             47 hours ago    Exited (0) 23 hours ago           gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest      sh                    3 days ago      Exited (0) 3 days ago             admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello                3 days ago      Exited (0) 3 days ago             kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# |
#
# Udemy Detail : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436674?start=67#bookmarks
#
# * Container Isolation 
# When you are running multiple containers from same image they are created and stored in the filesystem seperately. 
# Which means there is no direct relationship between the filesystem created between the containers. 
# If you are creating a container A and Container B from the same image then you create few files under A, then that is going remain only in A and cannot see in B. 
#
# Udemy Detail : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436678?start=4#bookmarks
# 
#---------------------------------------------------------------------------------------------
#  Chapter 03 - Building custom images through Docker Server
#---------------------------------------------------------------------------------------------
#
# * Docker Build
# For doing docker build it uses 'Dockerfile' which is explained in detail in the next session. 
# Once you call the docker build it goes theough a set of process 
# 
# Process : Dockerfile => Docker Client (we interact with build command) => Docker Server (which process the request) => Process and Create a usable image 
#
# Syntax : vi Dockerfile
#          docker build . 
#
# Note : here '.' is denoted as the build context and Dockerfile should always start with 'D'
#
# * Docker file
# Docker build is normally done through a dockerfile and it has mainly three sessions 'Build', 'Run' and 'Command'
# At each stage there are certain process takes place and which will result in creating the image. 
#
# Build : At this stage you will need to specify the location from which you are going to download the base image. 
#       : Upon completion of the this stage base image will be downloaded and it will spin up a temporary container which can be said as a staging conatiner 
#
# Run   : Here will be mentioning the list of software we need to install etc
#       : At this stage the staging cotainer which created above will be used to install all packages within it. 
#       : Once its completes its phase it updates or save the image and destroy the staging container. 
#
# CMD   : At this stage it will spin up another staging container and then it will update the startup command etc to that container. 
#       : Once this stage is done, then it will update save the container to the image and then destroy the container. 
#
# Udemy Detail : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436706?start=228#bookmarks
#
# * Creating a Dockerfile 
# You can setup a directory to create a docker image, then setup a docker file similar to below 
#
# | [ec2-user@ip-172-31-21-124 docker_local_hub]$ cd /apps/docker_local_hub/apache/    --> make a directory specific to that build process
# | [ec2-user@ip-172-31-21-124 apache]$ ls
# | Dockerfile
# | [ec2-user@ip-172-31-21-124 apache]$ 
# | [ec2-user@ip-172-31-21-124 apache]$ more Dockerfile
# | # BUILD - What base image we are going to use here
# | FROM centos
# |
# | # RUN - Download and install dependancy for the new image
# | RUN yum install httpd -y -q 
# |
# | # CMD - Tell what command or action it need to perform during startup
# | CMD ["/usr/sbin/httpd”, “-D”, “FOREGROUND”]
# |
# | [ec2-user@ip-172-31-21-124 apache]$
# |
#
# * Building a Docker Image 
# Once you have created the Dockerfile the you can run the build process as you are seeing below. 
# Once the build process completes then you can run the container from the created image  
#
# | [ec2-user@ip-172-31-21-124 apache]$ more Dockerfile 
# | # BUILD - What base image we are going to use here 
# | FROM centos
# | 
# | # RUN - Download and install dependancy for thennnnn21 new image 
# | RUN yum install httpd -y -q
# | 
# | # CMD - Tell what command or action it need to perform during startup
# | CMD ["/usr/sbin/httpd"]
# | 
# | [ec2-user@ip-172-31-21-124 apache]$ sudo docker build . 
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | STEP 1: FROM centos
# | STEP 2: RUN yum install httpd -y -q
# | warning: /var/cache/yum/x86_64/7/base/packages/apr-util-1.5.2-6.el7.x86_64.rpm: Header V3 RSA/SHA256 Signature, key ID f4a80eb5: NOKEY
# | Public key for apr-util-1.5.2-6.el7.x86_64.rpm is not installed
# | Public key for httpd-tools-2.4.6-89.el7.centos.x86_64.rpm is not installed
# | Importing GPG key 0xF4A80EB5:
# |  Userid     : "CentOS-7 Key (CentOS 7 Official Signing Key) <security@centos.org>"
# |  Fingerprint: 6341 ab27 53d7 8a78 a7c2 7bb1 24c6 a8a7 f4a8 0eb5
# |  Package    : centos-release-7-6.1810.2.el7.centos.x86_64 (@CentOS)
# |  From       : /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7
# | --> 750a90fe719bd9dd6162fc8fce5092c762fb729b23ee9d178d6131e2e2788f1c
# | STEP 3: FROM 750a90fe719bd9dd6162fc8fce5092c762fb729b23ee9d178d6131e2e2788f1c
# | STEP 4: CMD ["/usr/sbin/httpd", "-DNO_DETACH"]
# | --> 2ed0af508b4fbe38557e7c9beccae772203d2dcd4747fb3498c0118eef161301
# | STEP 5: COMMIT 
# | [ec2-user@ip-172-31-21-124 apache]$ sudo docker image list 
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | REPOSITORY                      TAG      IMAGE ID       CREATED              SIZE
# | <none>                          <none>   2ed0af508b4f   About a minute ago   347 MB    ==> New image created
# | docker.io/library/fedora        latest   289289d1a15b   2 weeks ago          326 MB
# | docker.io/library/busybox       latest   ef46e0caa533   2 weeks ago          1.43 MB
# | docker.io/library/mariadb       10.3     56089178535f   2 weeks ago          356 MB
# | docker.io/library/mariadb       latest   56089178535f   2 weeks ago          356 MB
# | docker.io/library/ubuntu        latest   7698f282e524   5 weeks ago          72.3 MB
# | docker.io/library/centos        latest   9f38484d220f   3 months ago         209 MB
# | docker.io/library/hello-world   latest   fce289e99eb9   5 months ago         5.62 kB
# | [ec2-user@ip-172-31-21-124 apache]$
# | [ec2-user@ip-172-31-21-124 apache]$
# | [ec2-user@ip-172-31-21-124 apache]$ sudo docker run 2ed0af508b4f    --> Starting a container from the created image
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 10.88.0.30. Set the 'ServerName' directive globally to suppress this message
# | [ec2-user@ip-172-31-21-124 apache]$
# | [ec2-user@ip-172-31-21-124 apache]$ sudo docker ps 
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                                             COMMAND               CREATED         STATUS             PORTS  NAMES
# | 76fc5b8c1a22  2ed0af508b4fbe38557e7c9beccae772203d2dcd4747fb3498c0118eef161301  /usr/sbin/httpd -...  18 seconds ago  Up 18 seconds ago         wonderful_poincare  ==> New Container
# | 0c1192c600ae  docker.io/library/busybox:latest                                  ping google.com       10 days ago     Up 10 days ago            friendly_lamport
# | [ec2-user@ip-172-31-21-124 apache]$ 
# | 
#
# Udemy Detail : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436706?start=228#bookmarks
#
# * Modifying an existing image 
# In case you will need to create a modified image for an existing one then you can do that by following steps 
# 
# 1. Update the Dockerfile with the new requirement which you have created already 
# 2. Then run the docker build process 
# 3. Then docker build will create the new image from the cached previous image only with the new modifications added
# 4. Once the build process completes, it will create a new image with the latest requirement. 
# 5. This does not delete or overwrite the previous image
#
# Example : Below example we are going to create the new docker image with additional 'gcc' requirements
#
# | [ec2-user@ip-172-31-21-124 apache]$ more Dockerfile
# | # BUILD - What base image we are going to use here
# | FROM centos
# |
# | # RUN - Download and install dependancy for thennnnn21 new image
# | RUN yum install httpd -y -q
# | RUN yum install gcc -y -q
# |
# | # CMD - Tell what command or action it need to perform during startup
# | CMD ["/usr/sbin/httpd", "-DNO_DETACH"]
# |
# | [ec2-user@ip-172-31-21-124 apache]$
# | [ec2-user@ip-172-31-21-124 apache]$ sudo docker build .
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | STEP 1: FROM centos
# | STEP 2: RUN yum install httpd -y -q
# | --> Using cache 750a90fe719bd9dd6162fc8fce5092c762fb729b23ee9d178d6131e2e2788f1c
# | STEP 3: FROM 750a90fe719bd9dd6162fc8fce5092c762fb729b23ee9d178d6131e2e2788f1c
# | STEP 4: RUN yum install gcc -y -q
# | Delta RPMs disabled because /usr/bin/applydeltarpm not installed.
# | --> 2c086ce33cd684c8cf66dca6bf2fb91df49016c75130fe24a028898d5de2eb92
# | STEP 5: FROM 2c086ce33cd684c8cf66dca6bf2fb91df49016c75130fe24a028898d5de2eb92
# | STEP 6: CMD ["/usr/sbin/httpd", "-DNO_DETACH"]
# | --> 9f27a8c302be8e3efc0e1cc6c6a2c0bca778cbea0652188a7044f2f582e6d0be
# | STEP 7: COMMIT
# | [ec2-user@ip-172-31-21-124 apache]$
# | [ec2-user@ip-172-31-21-124 apache]$ sudo docker image list | head -3
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | REPOSITORY                      TAG      IMAGE ID       CREATED         SIZE
# | <none>                          <none>   9f27a8c302be   3 minutes ago   526 MB
# | <none>                          <none>   2ed0af508b4f   4 days ago      347 MB
# | [ec2-user@ip-172-31-21-124 apache]$
#
#
# * Tagging or Naming an image while building 
# While creatng an image on the previous instances we must have seen that it had only an image ID and there is no name associated with it. 
# You can create the image with a name associated with it, for that only requirement is you should have a docker hud id, if its your personal image. 
# There is a naming convention it follows normally. 
#
# Syntax  : <docker_hub_id>/<image_name>:<versiob>
# Example : ajay291491/apache:latest 
#
# Note : Normally for the version number we denote that with the latest. 
#
# To build a image with the 'name' tag you will need to provide '-t' followed by image name 
#
# Syntax  : docker build -t <docker_hub_id>/<image_name>:<version> . 
# Example : docker build -t ajay291491/apache:latest . 
#
# Example : In below example we are going to build a docker image with the name 
#
# | [ec2-user@ip-172-31-21-124 apache]$ sudo docker build -t ajay291491/apache-gcc:latest . 
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | STEP 1: FROM centos
# | STEP 2: RUN yum install httpd -y -q
# | --> Using cache 750a90fe719bd9dd6162fc8fce5092c762fb729b23ee9d178d6131e2e2788f1c
# | STEP 3: FROM 750a90fe719bd9dd6162fc8fce5092c762fb729b23ee9d178d6131e2e2788f1c
# | STEP 4: RUN yum install gcc -y -q
# | --> Using cache 2c086ce33cd684c8cf66dca6bf2fb91df49016c75130fe24a028898d5de2eb92
# | STEP 5: FROM 2c086ce33cd684c8cf66dca6bf2fb91df49016c75130fe24a028898d5de2eb92
# | STEP 6: RUN yum install tree -y -q
# | --> 4b9e61b6888d4427f783bf2abd0bd1bda80c601a8e5ac4e75d6d25a59abd5dbc
# | STEP 7: FROM 4b9e61b6888d4427f783bf2abd0bd1bda80c601a8e5ac4e75d6d25a59abd5dbc
# | STEP 8: CMD ["/usr/sbin/httpd", "-DNO_DETACH"]
# | --> 0c7753e7e80409e82e84e9be1fa396965d7c63200f274a7299a90010a077f6a5
# | STEP 9: COMMIT ajay291491/apache-gcc:latest
# | [ec2-user@ip-172-31-21-124 apache]$
# | [ec2-user@ip-172-31-21-124 apache]$ sudo docker image list 
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | REPOSITORY                        TAG      IMAGE ID       CREATED          SIZE
# | localhost/ajay291491/apache-gcc   latest   0c7753e7e804   12 seconds ago   631 MB
# | <none>                            <none>   9f27a8c302be   34 minutes ago   526 MB
# | <none>                            <none>   2ed0af508b4f   4 days ago       347 MB
# | docker.io/library/fedora          latest   289289d1a15b   2 weeks ago      326 MB
# | docker.io/library/busybox         latest   ef46e0caa533   2 weeks ago      1.43 MB
# | docker.io/library/mariadb         latest   56089178535f   3 weeks ago      356 MB
# | docker.io/library/mariadb         10.3     56089178535f   3 weeks ago      356 MB
# | docker.io/library/ubuntu          latest   7698f282e524   6 weeks ago      72.3 MB
# | docker.io/library/centos          latest   9f38484d220f   3 months ago     209 MB
# | docker.io/library/hello-world     latest   fce289e99eb9   5 months ago     5.62 kB
# | [ec2-user@ip-172-31-21-124 apache]$ 
# | [ec2-user@ip-172-31-21-124 apache]$ sudo docker run localhost/ajay291491/apache-gcc
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | AH00558: httpd: Could not reliably determine the server's fully qualified domain name, using 10.88.0.31. Set the 'ServerName' directive globally to suppress this message
# | 
# | 
# | [ec2-user@ip-172-31-21-124 apache]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                                             COMMAND               CREATED         STATUS                     PORTS  NAMES
# | 32e425129b1e  localhost/ajay291491/apache-gcc:latest                            /usr/sbin/httpd -...  26 seconds ago  Exited (0) 12 seconds ago         gallant_wright
# | 76fc5b8c1a22  2ed0af508b4fbe38557e7c9beccae772203d2dcd4747fb3498c0118eef161301  /usr/sbin/httpd -...  4 days ago      Up 4 days ago                     wonderful_poincare
# | 6ec232aa749a  docker.io/library/busybox:latest                                  sh                    2 weeks ago     Exited (0) 12 days ago            agitated_visvesvaraya
# | a8ed65ecd30c  docker.io/library/busybox:latest                                  sh                    2 weeks ago     Exited (0) 11 days ago            agitated_rosalind
# | cc80521b1b45  docker.io/library/busybox:latest                                  sh                    2 weeks ago     Exited (1) 2 weeks ago            nervous_turing
# | 1016f0da1363  docker.io/library/mariadb:10.3                                    docker-entrypoint...  2 weeks ago     Exited (1) 2 weeks ago            xenodochial_euler
# | 0c1192c600ae  docker.io/library/busybox:latest                                  ping google.com       2 weeks ago     Up 2 weeks ago                    friendly_lamport
# | fc4f9980fe0a  docker.io/library/ubuntu:latest                                   uptime                2 weeks ago     Exited (0) 2 weeks ago            admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest                                   /bin/bash             2 weeks ago     Exited (0) 2 weeks ago            gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest                                  sh                    2 weeks ago     Exited (0) 2 weeks ago            admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest                              /hello                2 weeks ago     Exited (0) 2 weeks ago            kind_kalam
# | [ec2-user@ip-172-31-21-124 apache]$ 
# | [ec2-user@ip-172-31-21-124 apache]$ 
# | 
#
# * Saving a running conatiner to new image 
# Additional to above mentioned method, there is one more way using you can create a modified docker image. 
# To do that you will need to follow below process 
#
# 1. Run the container with 'sh' command to get the shell access
# 2. Once the shell is launched make all modification needed, such as installing a package or tuning a component etc. 
# 3. Then open another terminal and run a docker commit on the container id 
# 4. This will help you to create a new modified docker image. 
#
# Syntax : docker commit -c 'CMD["arguments"] container_ID new_image_name
#
#---------------------------------------------------------------------------------------------
#  Chapter 04 - Making real projects with Container 
#
#  UDEMY : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436978#overview
#---------------------------------------------------------------------------------------------
# 
# * Glossary 
# Below are the few configuration files parameter we are going to use as part of creating our application image via 'dockerfile' 
#
# FROM    : This will be the rgistery from we are taking the base image 
# WORKDIR : This will be the default working directory which will be used with in the container, wehn you copy files this will be the location where its getting created. 
#         : In case this directory is not available it will be created as part of the docker build process 
# COPY    : This command will help you to copy the files from the local files into the docker 
# RUN     : These are list of steps which need to run as part of building images, such as installing package, building something etc 
# CMD     : This is the startup command which you are going to use while starting the container 
#
# * Port Binding 
# When you work with a container you will need to bind the undelying host port with the container port. 
# reason for this is container will be accesses from the same host IP with a port number. 
# When traffic reaches the host port, host should know to which port it should route the traffic to. 
# 
# Note : Port binding is always mentioned in the container run time rather than while building the image. 
# Syntax : docker run -p 8080:80 <docker_image>
#
# Here -p represents the port binding 
# 8080 is the host port 
# 80 is the conatiner port to which it is getting mapped to 
#
# * Tagging an image 
# When you normally create an image it gets created with the UUID number 
# if you also want to associate name along with the image, you can tag that. 
#
# Syntax : docker build -t <docker_hub_id>/image_name:<optional_version_number>
#
# Note : if you do not supply a version number it assume it as the latest image 
#
# * Real Project : Creating a node js web server using docker 
# Task : Create a node JS web server up and running via docker and then it should accessible via the network using port 8080
#
# Resources vailable : 
# - Base Image : node:alpine    [ This means we are geting the alpine image which is fron node docker hub repo which comes with JS utilities such as npm]
# - JS files   : index.js       [ This file will hold the configuration about the web server ]
# - JS files   : package.js     [ This file contains the dependancy package list which needed for the index.js]
# - WORKDIR    : /opt/apps      [ This will be the working directory with in the container to copy the files ] 
# - RUN        : npm install    [ This will install all the required packages for the JS application which mentioned in package.js]
# - RUN        : npm start      [ This will start the JS development server ]
#
# Example : Please see below ste by step details to create this container 
#
# . STEP 1: Create the index.js and package.json file for the webserver 
#
# | [root@ip-172-31-21-124 node_js]# cd cd /apps/docker_local_hub/node_js 
# | [root@ip-172-31-21-124 node_js]# more index.js
# | const express = require('express');
# |
# | const app = express();
# |
# | app.get('/', (req, res) => {
# |     res.send('Welcome to Sathsang, how are you doing');
# | });
# |
# | app.listen(8080, () => {
# |     console.log('Listening on port 8080');
# | });
# |     
# | [root@ip-172-31-21-124 node_js]# vim package.json
# | [root@ip-172-31-21-124 node_js]# more index.js
# | const express = require('express');
# |
# | const app = express();
# |
# | app.get('/', (req, res) => {
# |     res.send('Welcome to Sathsang, how are you doing');
# | });
# |
# | app.listen(8080, () => {
# |     console.log('Listening on port 8080');
# | });
# |     
# | [root@ip-172-31-21-124 node_js]#
# 
#
# . STEP 2:  Create the Docker file for the image build 
#
# | [root@ip-172-31-21-124 node_js]# more Dockerfile
# | # Base image used from node, which contains alpine base image with npm utilities
# |
# | FROM node:alpine
# |
# | # Working directory for the container
# |
# | WORKDIR /opt/apps
# |
# | # COPY these file in pwd to  working directory of container
# |
# | COPY ./ ./
# |
# | # Steps to run as part of building the container
# |
# | RUN npm install
# |
# | # Default command for container to startup
# |
# | CMD ["npm", "start"]
# | [root@ip-172-31-21-124 node_js]#
#
# . STEP 3: Build the my_nodejs_webapp using the images given above 
#
# | [root@ip-172-31-21-124 node_js]# docker build -t ajay291491:my_nodejs_webapp .
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | STEP 1: FROM node:alpine
# | Getting image source signatures
# | Copying blob e7c96db7181b: 2.63 MiB / 2.63 MiB [============================] 1s
# | Copying blob a2b3c20ed471: 21.73 MiB / 21.73 MiB [==========================] 1s
# | Copying blob 240c8d07e1ef: 1.27 MiB / 1.27 MiB [============================] 1s
# | Copying blob 21738480b7ba: 280 B / 280 B [==================================] 1s
# | Copying config a9a8b83644f7: 5.52 KiB / 5.52 KiB [==========================] 0s
# | Writing manifest to image destination
# | Storing signatures
# | STEP 2: WORKDIR /opt/apps
# | --> ffcdce5b2301c839f403f66e6334e4b5e6b2298db133c2c6ff466faf955502f6
# | STEP 3: FROM ffcdce5b2301c839f403f66e6334e4b5e6b2298db133c2c6ff466faf955502f6
# | STEP 4: COPY ./ ./
# | --> 545e51456b63686e4d13dadadf86ff8577961441d6b97e79c728dcd896b32efd
# | STEP 5: FROM 545e51456b63686e4d13dadadf86ff8577961441d6b97e79c728dcd896b32efd
# | STEP 6: RUN npm install
# | ERRO[0008] read container terminal output: input/output error: input/output error
# | npm notice created a lockfile as package-lock.json. You should commit this file.
# | npm WARN apps No description
# | npm WARN apps No repository field.
# | npm WARN apps No license field.
# |
# | added 50 packages from 37 contributors and audited 126 packages in 4.781s
# | found 0 vulnerabilities
# |
# | --> d9939a78ba16438de25cd0562953bc76a4593992b663212e2c2c601ad9580a5f
# | STEP 7: FROM d9939a78ba16438de25cd0562953bc76a4593992b663212e2c2c601ad9580a5f
# | STEP 8: CMD ["npm", "start"]
# | --> d85d0dcc24a40f270fac81e2c4968068a76c2a5fca00e3f9ea6d72dfba43ccbb
# | STEP 9: COMMIT ajay291491:my_nodejs_webapp
# | [root@ip-172-31-21-124 node_js]#
#
# . STEP 4: List the newly created image and that is available with the tag 
#
# | [root@ip-172-31-21-124 node_js]# docker image list
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | REPOSITORY                        TAG                IMAGE ID       CREATED          SIZE
# | localhost/ajay291491              my_nodejs_webapp   d85d0dcc24a4   19 seconds ago   87 MB
# | docker.io/library/node            alpine             a9a8b83644f7   2 weeks ago      83 MB
# | localhost/ajay291491/apache-gcc   latest             0c7753e7e804   3 weeks ago      631 MB
# | <none>                            <none>             9f27a8c302be   3 weeks ago      526 MB
# | <none>                            <none>             2ed0af508b4f   3 weeks ago      347 MB
# | docker.io/library/fedora          latest             289289d1a15b   5 weeks ago      326 MB
# | docker.io/library/busybox         latest             ef46e0caa533   5 weeks ago      1.43 MB
# | docker.io/library/mariadb         10.3               56089178535f   6 weeks ago      356 MB
# | docker.io/library/mariadb         latest             56089178535f   6 weeks ago      356 MB
# | docker.io/library/ubuntu          latest             7698f282e524   2 months ago     72.3 MB
# | docker.io/library/centos          latest             9f38484d220f   4 months ago     209 MB
# | docker.io/library/hello-world     latest             fce289e99eb9   6 months ago     5.62 kB
# | [root@ip-172-31-21-124 node_js]#
#
# . STEP 5: Start the container with the port binding 
#
# | [root@ip-172-31-21-124 node_js]# docker  run -p 8080:80 -it d85d0dcc24a4
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# |
# | > @ start /opt/apps
# | > node index.js
# |
# | Listening on port 8080
# | ^C[root@ip-172-31-21-124 node_js]# docker  run -p 80:80 -it d85d0dcc24a4
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# |
# | > @ start /opt/apps
# | > node index.js
# |
# | Listening on port 8080
# |
#
# . STEP 6: Access the web service and make sure all working fine.
#
# | [root@sathsang kubernets]# curl http://ec2-13-58-45-122.us-east-2.compute.amazonaws.com:8080
# | Welcome to Sathsang infra, An instance of joy with AWS and Docker
# | [root@sathsang kubernets]#
#
# * Rebuilding a container 
# As an when you have changes to the application running on the container below is going to the proccedure you are going to follow. 
# Note : there is no method available to make hot changes on the existing container image as they are just a snapshot of the config when they have made.
#
# 1. Make the relevant changes to the code in the source code directory 
# 2. Once the changes to source code has been made then rebuild the same image 
# 3. When you rebuild the image, from the point where the changes are effective, docker will flush those changes and then rebuild the image. 
#
# For example, if you have multiple files on the same conatiner, when you make changes to one file then the place from files is defined will get rebuild. 
#
# NOTE : if you want to make use of the maximum existing cache and then you need to only use the minimal changes to existing cache, then you will need plan your docker file accordingly. 
#
# Example : We are going to rebuild the existing container with some changes to index.js file
#
# . STEP 1 - Make the changes to the index.js file in the source code directory
#
# | root@ip-172-31-21-124 node_js]# more index.js
# | const express = require('express');
# |
# | const app = express();
# |
# | app.get('/', (req, res) => {
# |     res.send('Welcome to Sathsang infra, instance of joy with AWS and Docker \n');    --> This is the change we have made to the conatiner 
# | });
# |
# | app.listen(8080, () => {
# |     console.log('Listening on port 8080');
# | });
# |
# | [root@ip-172-31-21-124 node_js]#
#
# . STEP 2 : Rearrange the Dockerfile to make sure only minimum cache will get bursted 
#
# | [root@ip-172-31-21-124 node_js]# more Dockerfile
# | # Base image used from node, which contains alpine base image with npm utilities
# |
# | FROM node:alpine
# |
# | # Working directory for the container
# |
# | WORKDIR /opt/apps
# |
# | # COPY the static file in pwd to  working directory of container
# |
# | COPY ./package.json ./						--> Moved package.json above since it doesn't require to be rebuilt
# |
# | # Steps to run as part of building the container
# |
# | RUN npm install
# |
# | # COPY the dynamic files
# |
# | COPY ./ ./								--> This will be the place where actual changes will occur
# |
# | # Default command for container to startup
# |
# | CMD ["npm", "start"]
# | [root@ip-172-31-21-124 node_js]#
#
# . STEP 3 : Rebuild the conatiner 
#
# | [root@ip-172-31-21-124 node_js]# docker rebuild -t ajay291491/node_web_app .
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | Command "rebuild" not found.
# | See `podman --help`.
# | [root@ip-172-31-21-124 node_js]# docker build -t ajay291491/node_web_app .
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | STEP 1: FROM node:alpine
# | STEP 2: WORKDIR /opt/apps
# | --> Using cache 87eea9b1a98c628c2fc5dec2931533e65863e52f116ac49dc281feb31cf9f704
# | STEP 3: FROM 87eea9b1a98c628c2fc5dec2931533e65863e52f116ac49dc281feb31cf9f704
# | STEP 4: COPY ./package.json ./
# | --> Using cache c8bdfc26fd92e12b1e35f4a09e97d521b8719eba4f38b8a37198d5265ba163ed
# | STEP 5: FROM c8bdfc26fd92e12b1e35f4a09e97d521b8719eba4f38b8a37198d5265ba163ed
# | STEP 6: RUN npm install
# | --> Using cache 6d2d190066366c0d7da559da0b2762ed426ee4721c0c11944f6f677adc17948d
# | STEP 7: FROM 6d2d190066366c0d7da559da0b2762ed426ee4721c0c11944f6f677adc17948d
# | STEP 8: COPY ./ ./										--> From here remaining steps will be executed again
# | --> Using cache dc3681c55fad568def23434be0ae13779742a245428099df978bd92c5d606bfc
# | STEP 9: FROM dc3681c55fad568def23434be0ae13779742a245428099df978bd92c5d606bfc
# | STEP 10: CMD ["npm", "start"]
# | --> Using cache 1ecc5a7cb29e743f02340bc14f4f02f353dfb14af72460d5e93048ed1dd9c45c
# | STEP 11: COMMIT ajay291491/node_web_app
# | [root@ip-172-31-21-124 node_js]#
#
# . STEP 4 : Now run the conatiner and test it again
#
# | [root@sathsang kubernets]# curl http://ec2-13-58-45-122.us-east-2.compute.amazonaws.com:8080
# | Welcome to Sathsang infra, instance of joy with AWS and Docker 
# | [root@sathsang kubernets]##
# 
# * Why we need to be careful in modifying or planning the Dockerfile 
# As the applications becomes bigger and bigger it will increase the time for building that image. 
# So it will be always good we keep minimal changes to the existing cache so that during build time only minimal changes will be done. 
# That will save of lot of time when you rebuild applications and it will have lot of importance when comes to cloud. 
#
#
#---------------------------------------------------------------------------------------------
#  Chapter 05 - Making multi container application
#
#  UDEMY : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436978#overview
#---------------------------------------------------------------------------------------------
#
# * Docker Compose
# Docker Compose is a tool for defining a multi container appliaction. 
# One of the prime responsibility of docker compose is to create a networking between different containers in a multi container app infra. 
# This brings up an isolated environment for multiple containers to work together. 
# In most of the case there will be multiple containers working in various different ports in an isolated environment. 
# They will be exposed to the external world through a port which bind to their hypervisor. 
# You will be defining the configuration about your multi container application  and its servics in 'docker-compose.yml' file. 
# This yaml file will bring up all the services and appliaction as defined in the yaml file. 
# 
# Using docker compose mainly consist of three steps. 
#
# 1. Defining all your app environment in a Dockerfile so that it can be reproduced anywhere
# 2. Defining all your services which makes your application under the services, so that it can create multiple container under an isolated environment 
# 3. Run 'docker-compose up' to bring all your application up. 
#
# Key Commands 
#
# $ docker compose up              ==> This is a combination of 'docker run <few images>'
# $ docker compose up --build      ==> This is comination of 'docker build . ' + 'docker run <list of images>'
# $ docker compose down            ==> This will terminate the containers
#
# udemy : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11437002?start=75#bookmarks
#
# * File structure - docker-compose.yml
# When you are using docker-compose method, then you can keep below files as needed. 
#
#  1. If you are already using an image which is built then you might require only the 'docker-compose.yml' file. 
#  2. if you are not build any image so far, you arrange files like 
#     - application codes or files as needed
#     - 'Dockerfile' to build the application image using the files and config
#     - 'docker-compose.yml' to build the isolated environment for various containers. 
#
# Syntax : Below is the syntax of the docker-compose.yml
#
# version:  {{ version_number }}          => version of docker compose you are using
# services:                       => List docker containers you are going to spin up, these containers will be in a same isolated environment and can communicate using port number internally
#   {{ service_name_one }} :		 => This is name of the container and under the isolated env this container will be accessible via this name 
#     images: {{ name of the image }}    => This should be a valid image name in the repo
#     ports : 
#        - {{ port_number }}          => list of port number for the service to open
#
#   {{ service_name_two }} : 
#     image: {{ name of the image }}
#     ports: 
#       - {{ port_number_one }}
#       - {{ external_port:port_number_two }}		==> This kind of config are used to map between local and hypervisor ports 
#
#   {{ service_name_three }}:
#     build: {{ . }}					==> You can also build the image, if needed via docker compose
#     ports:
#       - {{ port_number }} 				
#
#
#  Example: Below example shows a sample docker-compose.yml file for the visitor application 
#
# | [root@ip-172-31-21-124 visitor_count]# more docker-compose.yml 
# | version: '3'
# | services: 
# |   node_app:
# |     build: .			-> This is a image getting build locally
# |     ports:
# |       - "4000:8081"			-> portmapping for external access
# |   redis-server:
# |     image: 'redis'A			-> creating a container named 'redis-server' using docker hub image 'redis'
# | [root@ip-172-31-21-124 visitor_count]# 
# | 
#
#
# * Creating Multi container apps for - "Visitor Count APP"
# In this chapter we will start working on creating application with multiple containers. 
# Here we will create an application with two containers one is node JS application and it will have a redis backend. 
# Node application will act as the front end and redis will act as the backend.
# Whom ever access the url, this app will return the value of how many times it got accessed. 
#
# . Tasks Involved for apps 
#   - Create a visitor app which consist of package.json and index.js 
#   - A backednd redis database which stores the vistor count
#   - Node web application expected to communicate with a backend redis-server 
#    
# . Tasks involved from redis
#   - Create docker image for node app which brings up a web app which stores vistor count
#   - Pull redis docker image from docker hub
#   - create a network infra for both node web app container and redis servers to communicate via ports in an isolated environment 
#
# STEP 1 : Create an application directory and application code base inside. 
# 
# | [root@ip-172-31-21-124 visitor_count]# pwd
# | /apps/docker_local_hub/visitor_count
# | [root@ip-172-31-21-124 visitor_count]# ls -l package.json index.js 
# | -rw-r--r--. 1 root root 443 Aug  5 05:33 index.js
# | -rw-r--r--. 1 root root 118 Aug  5 04:47 package.json
# | [root@ip-172-31-21-124 visitor_count]# 
# | [root@ip-172-31-21-124 visitor_count]# more package.json 
# | {
# |   "dependencies": {
# |     "express": "*",
# |     "redis": "2.8.0"
# |   },
# |   "scripts": {
# |     "start": "node index.js"
# |   }
# | }
# | [root@ip-172-31-21-124 visitor_count]# 
# | [root@ip-172-31-21-124 visitor_count]# 
# | [root@ip-172-31-21-124 visitor_count]# more index.js 
# | const express = require('express');
# | const redis = require('redis');
# | const app = express();
# | 
# | const client = redis.createClient({
# |   host: 'redis-server',
# |   port: 6379
# | });
# | 
# | client.set('visits', 0);
# | 
# | app.get('/', (req, res) => {
# |   client.get('visits', (err, visits) => {
# |     res.send('Number of visits is ' + visits);
# |     client.set('visits', parseInt(visits) + 1);
# |   });
# | });
# | 
# | app.listen(8081, () => {
# |   console.log('Listening on port 8081');
# | });
# | [root@ip-172-31-21-124 visitor_count]# 
# | [root@ip-172-31-21-124 visitor_count]# 
# | 
#
# STEP 2 : Create Dockerfile to create the application
#
# | [root@ip-172-31-21-124 visitor_count]# more Dockerfile 
# | # Getting the base Image from alpine:linux
# | FROM node:alpine
# | 
# | # Setting up the working directory in container
# | WORKDIR /app
# | 
# | # Copying the package.json file to /app directory
# | COPY package.json .
# | 
# | # Running npm install command to install dependancies 
# | RUN npm install
# | 
# | # Copy rest of the files in code base(as of now index.js) to /app to redice cache burst
# | COPY . .
# | 
# | # Command to start the service in container
# | CMD ["npm", "start"]
# | [root@ip-172-31-21-124 visitor_count]# 
# | 
#
# STEP 3 : Create 'docker-compose.yml' to bring both node app and redis container on same isolated envioenment 
#
# | [root@ip-172-31-21-124 visitor_count]# 
# | [root@ip-172-31-21-124 visitor_count]# more docker-compose.yml 
# | version: '3'
# | services: 
# |   node_app:
# |     build: .
# |     ports:
# |       - "4000:8081"
# |   redis-server:
# |     image: 'redis'
# | [root@ip-172-31-21-124 visitor_count]# 
# | [root@ip-172-31-21-124 visitor_count]# 
# | 
#
#
# STEP 4 : Start the container environment using the 'docker compose up' command
#
# | [root@ip-172-31-21-124 visitor_count]# docker-compose up
# | Building node_app
# | Step 1/6 : FROM node:alpine
# | alpine: Pulling from library/node
# | e7c96db7181b: Pull complete
# | 72484f09da35: Pull complete
# | 86bee4bed5f2: Pull complete
# | f9e983f0fe2c: Pull complete
# | Digest: sha256:300e3d2c19067c1aec9d9b2bd3acbd43d53797a5836d70a23e437a5634bcd33a
# | Status: Downloaded newer image for node:alpine
# |  ---> d97a436daee9
# | Step 2/6 : WORKDIR /app
# |  ---> Running in 2e3d8ecdd192
# | Removing intermediate container 2e3d8ecdd192
# |  ---> efb442f50567
# | Step 3/6 : COPY package.json .
# |  ---> 97b2310ddc9f
# | Step 4/6 : RUN npm install
# |  ---> Running in d0a5e431a2c8
# | npm notice created a lockfile as package-lock.json. You should commit this file.
# | npm WARN app No description
# | npm WARN app No repository field.
# | npm WARN app No license field.
# | 
# | added 54 packages from 41 contributors and audited 130 packages in 2.633s
# | found 0 vulnerabilities
# | 
# | Removing intermediate container d0a5e431a2c8
# |  ---> b9b8c8581e14
# | Step 5/6 : COPY . .
# |  ---> 4b1f9010e35e
# | Step 6/6 : CMD ["npm", "start"]
# |  ---> Running in 002916d81331
# | Removing intermediate container 002916d81331
# |  ---> 664d764d9678
# | Successfully built 664d764d9678
# | Successfully tagged visitor_count_node_app:latest
# | WARNING: Image for service node_app was built because it did not already exist. To rebuild this image you must use `docker-compose build` or `docker-compose up --build`.
# | Pulling redis-server (redis:)...
# | latest: Pulling from library/redis
# | f5d23c7fed46: Pull complete
# | 831c20fd50cb: Pull complete
# | bc2a0f25caa5: Pull complete
# | 745ac314a007: Pull complete
# | 6deeca231441: Pull complete
# | 6291e84f5373: Pull complete
# | Digest: sha256:854715f5cd1b64d2f62ec219a7b7baceae149453e4d29a8f72cecbb5ac51c4ad
# | Status: Downloaded newer image for redis:latest
# | Creating visitor_count_redis-server_1 ... done
# | Creating visitor_count_node_app_1     ... done
# | Attaching to visitor_count_node_app_1, visitor_count_redis-server_1
# | redis-server_1  | 1:C 05 Aug 2019 07:28:31.155 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
# | redis-server_1  | 1:C 05 Aug 2019 07:28:31.155 # Redis version=5.0.5, bits=64, commit=00000000, modified=0, pid=1, just started
# | redis-server_1  | 1:C 05 Aug 2019 07:28:31.155 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
# | redis-server_1  | 1:M 05 Aug 2019 07:28:31.157 * Running mode=standalone, port=6379.
# | redis-server_1  | 1:M 05 Aug 2019 07:28:31.157 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
# | redis-server_1  | 1:M 05 Aug 2019 07:28:31.157 # Server initialized
# | redis-server_1  | 1:M 05 Aug 2019 07:28:31.157 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.
# | redis-server_1  | 1:M 05 Aug 2019 07:28:31.157 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
# | redis-server_1  | 1:M 05 Aug 2019 07:28:31.157 * Ready to accept connections
# | node_app_1      | 
# | node_app_1      | > @ start /app
# | node_app_1      | > node index.js
# | node_app_1      | 
# | node_app_1      | Listening on port 8081
# | 
# | 
#
# STEP 5 : Access the url and make sure it is working as expected 
#
# | [sathsang@sathsang ~]$ curl http://ec2-13-58-45-122.us-east-2.compute.amazonaws.com:4000/;echo
# | Number of visits is 38
# | [sathsang@sathsang ~]$ 
# | [sathsang@sathsang ~]$ curl http://ec2-13-58-45-122.us-east-2.compute.amazonaws.com:4000/;echo
# | Number of visits is 39
# | [sathsang@sathsang ~]$ curl http://ec2-13-58-45-122.us-east-2.compute.amazonaws.com:4000/;echo
# | Number of visits is 40
# | [sathsang@sathsang ~]$ 

#


