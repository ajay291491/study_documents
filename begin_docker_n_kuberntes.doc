#---------------------------------------------------------------------------------------------
#  Chapter 01 - Introduction to Docker
#---------------------------------------------------------------------------------------------
# * Install Docker
# You can install Docker by install below two packages 
# | 
# | [root@dockerstation01 ~]# rpm -qa| grep -i docker
# | [root@dockerstation01 ~]# rpm -qa| grep -i docker
# | docker-ce-cli-18.09.6-3.el7.x86_64
# | docker-ce-18.09.1-3.el7.x86_64
# | [root@dockerstation01 ~]#
# | 
#
# * Verify the installation 
# You can verify the instllation of docker server and client by running below command 
# | 
# | [root@dockerstation01 ~]# docker version
# | Client:
# |  Version:           18.09.6
# |  API version:       1.39
# |  Go version:        go1.10.8
# |  Git commit:        481bc77156
# |  Built:             Sat May  4 02:34:58 2019
# |  OS/Arch:           linux/amd64
# |  Experimental:      false
# |
# | Server: Docker Engine - Community
# |  Engine:
# |   Version:          18.09.1
# |   API version:      1.39 (minimum version 1.12)
# |   Go version:       go1.10.6
# |   Git commit:       4c52b90
# |   Built:            Wed Jan  9 19:06:30 2019
# |   OS/Arch:          linux/amd64
# |   Experimental:     false
# | [root@dockerstation01 ~]#
# |
#
# * How to start a container 
# To start a container you will need to run the 'docker run' command. When you start a container there are few steps happens in the background 
#
# Syntax : docker run <image_name>
#
# Below are few steps which is outlined in the chronological order while running a docker run command 
#
# 1. When you run the command docker client contacts the docker server for image location
# 2. Then Docker server verifies the image in its cache, if its available it helps to start the image from the cache
# 3. Incase there is no cache available then it forwards the requst to container image repository "Docker Hub'
# 4. It checks for the image in the docker hub and then pulls that image int0 local repository or cache 
# 5. Then docker client will start the container from the image which has downloaded.
#
# Example : Below is an example to start a 'hello-world' program. 
#
# | [root@dockerstation01 ~]# docker run hello-world
# |
# | Hello from Docker!
# | This message shows that your installation appears to be working correctly.
# |
# | To generate this message, Docker took the following steps:
# |  1. The Docker client contacted the Docker daemon.
# |  2. The Docker daemon pulled the "hello-world" image from the Docker Hub.
# |     (amd64)
# |  3. The Docker daemon created a new container from that image which runs the
# |     executable that produces the output you are currently reading.
# |  4. The Docker daemon streamed that output to the Docker client, which sent it
# |     to your terminal.
# |
# | To try something more ambitious, you can run an Ubuntu container with:
# |  $ docker run -it ubuntu bash
# |
# | Share images, automate workflows, and more with a free Docker ID:
# |  https://hub.docker.com/
# |
# | For more examples and ideas, visit:
# |  https://docs.docker.com/get-started/
# |
# | [root@dockerstation01 ~]#
# |
# NOTE : Below tutorial will explain about how docker run works
# https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436626?start=79#bookmarks
#
#
# * What happens when you install docker container
# When you install docker container there will be a Linux virtual machine gets installed in the background which acts as the Docker Server
# You can see docker server operating system details in the 'docker version' command to verify this. 
# Any container process which runs will be from this container, this will be true regardless the underlying OS is Linux, Windows or Mac.
#
# Docker installation layering is done like below. 
# - Underlying Operating system (Windows / Linux / Mac)
# - Docker Server Linux VM gets created on top of the OS 
# - Docker contaner process running inside the Docker Server Linux VM
#
# NOTE : Udemy Detailed Tutorial on the Docker layers and how its works 
# https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436636?start=1#bookmarks
#
#
# * What is a Docker Image and container
# Docker image is a collection of software and filesystem snapshot along with a set of steps which can be used to startup a container.
# Container is a set of process which spins up with the instruction given from the docker images
# 
# NOTE : Below udemy tutorial gives a complete details about container image. 
# https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436632?start=422#bookmarks 
#
# 
# * What is namespacing and cgroups
# namespacing - namespacing a Linux feature which allows to isolate resourse per processs or group of process 
# cgroups     - cgroups also a Linux feature which limit the amount of resources used per process 
#
# NOTE : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436636?start=63#bookmarks
#
#---------------------------------------------------------------------------------------------
#  Chapter 02 - Manipulating a docker Container
#---------------------------------------------------------------------------------------------
#
# * Executing commands in Container 
# When you are running a command insider a docker container that will work only if that contaner image contains that commands embedded inside. 
# If the container image is not embedded with the commands then the command won't work 
#
# Examples : Below are two instances where the same command behave in different while executing in two different containers
#
# | [root@dockerstation01 ~]# docker run hello-world uptime
# | docker: Error response from daemon: OCI runtime create failed: container_linux.go:348: starting container process caused "exec: \"uptime\": executable file not found in $PATH": unknown.
# | [root@dockerstation01 ~]# docker run busybox uptime
# |  23:26:30 up  1:53,  0 users,  load average: 0.07, 0.02, 0.01
# | [root@dockerstation01 ~]# 
#
# Note : Here uptime command was not embedded in the 'hello-world' image where its available in 'busybox' 
#
# To run a command in a docker container you will need to follow below syntax 
#
# syntax : docker run <image> <command>
#
# * ps command
# This command can be used to find the list of running continers. 
# When you add '--all' parameter to the command then its going to give the details about all the commands ran in the past
#
# Syntax : docker ps 
#        : docker ps --all
#
# Example : Running the command to show currently running containers
#
# | [root@dockerstation01 ~]# docker ps 
# | CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
# | 3d488796f6ab        busybox             "top"               6 seconds ago       Up 4 seconds                            optimistic_mahavira
# | [root@dockerstation01 ~]# 
#
# Example : Running the command to show the history of all containers 
#
# | [root@dockerstation01 ~]# docker ps --all
# | CONTAINER ID        IMAGE               COMMAND                  CREATED              STATUS                        PORTS               NAMES
# | 3d488796f6ab        busybox             "top"                    About a minute ago   Up About a minute                                 optimistic_mahavira
# | ce70ccd4eaba        busybox             "uptime"                 7 minutes ago        Exited (0) 7 minutes ago                          blissful_fermat
# | 9e3a5166cd32        hello-world         "uptime"                 7 minutes ago        Created                                           sleepy_babbage
# | df515bd2bc4a        busybox             "ls etc"                 19 minutes ago       Exited (0) 19 minutes ago                         romantic_goldberg
# | 7b6d14cdc48c        busybox             "ls"                     19 minutes ago       Exited (0) 19 minutes ago                         focused_kapitsa
# | 1af30959d59f        busybox             "systemctl -a"           19 minutes ago       Created                                           epic_beaver
# | 4356fa5da624        busybox             "uname -a"               19 minutes ago       Exited (0) 19 minutes ago                         reverent_wu
# | feec6f069754        busybox             "cat /etc/redhat-relâ€¦"   20 minutes ago       Exited (1) 20 minutes ago                         festive_edison
# | bbfc0aaa39d9        busybox             "uname -r"               20 minutes ago       Exited (0) 20 minutes ago                         eloquent_noyce
# | cbbe3a745190        busybox             "top"                    20 minutes ago       Exited (130) 20 minutes ago                       elegant_banzai
# | dd4a37b07df2        busybox             "ping yahoo.com"         20 minutes ago       Exited (1) 20 minutes ago                         xenodochial_cori
# | 188cf85a7b3f        busybox             "ping google.com"        21 minutes ago       Exited (1) 20 minutes ago                         sad_shockley
# | e875caa538be        busybox             "ping"                   21 minutes ago       Exited (1) 21 minutes ago                         peaceful_snyder
# | 5f88bfa642d2        busybox             "uptime"                 22 minutes ago       Exited (0) 22 minutes ago                         hopeful_payne
# | 486ffb75e744        busybox             "sh"                     22 minutes ago       Exited (0) 22 minutes ago                         hopeful_heyrovsky
# | dd0a1203e18c        hello-world         "uptime"                 31 minutes ago       Created                                           pedantic_jackson
# | f7dfeb40ecde        hello-world         "ls"                     31 minutes ago       Created                                           compassionate_fermi
# | 9b7a8dc92eff        hello-world         "/hello"                 2 hours ago          Exited (0) 2 hours ago                            festive_colden
# | 64392280e628        hello-world         "/hello"                 2 weeks ago          Exited (0) 2 weeks ago                            sleepy_sinoussi
# | 779c5c963c0c        hello-world         "/hello"                 2 weeks ago          Exited (0) 2 weeks ago                            clever_heyrovsky
# | [root@dockerstation01 ~]#
# |
#
# * Understanding the docker run 
# When you are invoking the docker run command it actually a combination of docker create and docker start commands. 
#
# docker run = docker create <image_name> + docker run <container ID>
#
# * Docker create 
# Docker create will help you to create a writable container from a container image. 
# This is useful when you want to create a container with some specific command which need to be in a ready to create state later. 
# Once you create the container the container state will be in the "Created" status. 
#
# Syntax : docker create <image_name>
#
# Example : Below example is to create a fedora container
#
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker create ubuntu
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | Trying to pull registry.redhat.io/ubuntu:latest...Failed
# | Trying to pull quay.io/ubuntu:latest...Failed
# | Trying to pull docker.io/ubuntu:latest...Getting image source signatures
# | Copying blob 6abc03819f3e: 27.52 MiB / 27.52 MiB [==========================] 1s
# | Copying blob 05731e63f211: 844 B / 844 B [==================================] 1s
# | Copying blob 0bd67c50d6be: 164 B / 164 B [==================================] 1s
# | Copying config 7698f282e524: 3.27 KiB / 3.27 KiB [==========================] 0s
# | Writing manifest to image destination
# | Storing signatures
# | 348902c0561cc725828c4f79a7206cd19d6a3789567f158043aedb0610d6aa50
# | [ec2-user@ip-172-31-21-124 ~]$
# |
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND    CREATED        STATUS                 PORTS  NAMES
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash  3 seconds ago  Created                       gifted_booth  --> You can see the container in the Created State
# | 779800ec7966  docker.io/library/busybox:latest      sh         2 days ago     Exited (0) 2 days ago         admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello     2 days ago     Exited (0) 2 days ago         kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# |
#
# Detail Tutoroial : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436650?start=79#bookmarks
#
# * Docker start
# Docker start will help you to start the container which is already  created. 
# This will be useful when you want to start a conatiner again and again which is already created 
#
# Syntax : docker start [-a] <container_ID>
#
# If you are using "-a" string then it will attach the startingh output to the terminal, i.e STDOUT, STDERR and forward will be printed on the console 
#
# Example : Below is an example for starting a container which is already created 
#
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker create ubuntu uptime
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | fc4f9980fe0addc25a7584f360a6dc82a0fefa9433ff8b0ea9e970da935ca33d
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND    CREATED         STATUS                         PORTS  NAMES
# | fc4f9980fe0a  docker.io/library/ubuntu:latest       uptime     3 seconds ago   Created                               admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash  10 minutes ago  Exited (0) About a minute ago         gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest      sh         2 days ago      Exited (0) 2 days ago                 admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello     2 days ago      Exited (0) 2 days ago                 kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker start -a fc4f9980fe0a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# |  00:36:39 up 2 days, 37 min,  0 users,  load average: 0.05, 0.06, 0.02
# | [ec2-user@ip-172-31-21-124 ~]$
#
# * Restarting a container 
# When a container is exited then it doesnot mean that it is dead or it cannot be started again 
# You can always restart the same container using the docker start method which will help you to re-issue the same default command. 
# Kindly note when you are starting an exited container you won't be able to attach or trigger new commands to it, it will only pick the default command
#
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker ps -a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                                 COMMAND    CREATED         STATUS                     PORTS  NAMES
# | fc4f9980fe0a  docker.io/library/ubuntu:latest       uptime     19 minutes ago  Exited (0) 19 minutes ago         admiring_dijkstra
# | 348902c0561c  docker.io/library/ubuntu:latest       /bin/bash  30 minutes ago  Exited (0) 21 minutes ago         gifted_booth
# | 779800ec7966  docker.io/library/busybox:latest      sh         2 days ago      Exited (0) 2 days ago             admiring_nightingale
# | 9a20dd1593c4  docker.io/library/hello-world:latest  /hello     2 days ago      Exited (0) 2 days ago             kind_kalam
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker start -a fc4f9980fe0a
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# |  00:56:26 up 2 days, 57 min,  0 users,  load average: 0.00, 0.00, 0.00
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ sudo docker start -a fc4f9980fe0a ls			-> Note that same container doesnot allow to override the default command
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | you cannot start and attach multiple containers at once
# | [ec2-user@ip-172-31-21-124 ~]$
# |
#
# Detail Tutorial : https://www.udemy.com/docker-and-kubernetes-the-complete-guide/learn/lecture/11436652?start=139#bookmarks
#
# * How to delete a container
# If you no longer need the container instance then you can delete them by using 'docker rm' or 'docker system prune' command 
#
# Syntax : docker rm [conatiner_ID | all]
# Syntax : docker system prune           --> This will delete all containers 
#
# | [ec2-user@ip-172-31-21-124 ~]$ docker ps --all
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE                             COMMAND  CREATED            STATUS                        PORTS  NAMES
# | f1beb2b1f2db  docker.io/library/busybox:latest  uptime   About an hour ago  Exited (0) About an hour ago         suspicious_wiles
# | d782303fb193  docker.io/library/busybox:latest  uptime   About an hour ago  Exited (0) About an hour ago         priceless_darwin
# | 70cf55e7554e  docker.io/library/busybox:latest  sh       About an hour ago  Exited (0) About an hour ago         gracious_hamilton
# | 839d4ec68f32  docker.io/library/busybox:latest  sh       About an hour ago  Created                              optimistic_khorana
# | ac96670a3ff1  docker.io/library/busybox:latest  uptime   2 hours ago        Exited (0) 2 hours ago               pedantic_shirley
# | db8671b4bc4f  docker.io/library/busybox:latest  ls       2 hours ago        Exited (0) 2 hours ago               cocky_clarke
# | a7bce2f35192  docker.io/library/busybox:latest  ls       2 hours ago        Exited (0) 2 hours ago               vigorous_bassi
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ docker rm f1beb2b1f2db                           --> Deleteing only one Container
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | f1beb2b1f2db4040ea21e964999f706c932de4b76baef80b86f149e4866ccf63
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ docker rm --all				    --> Deleting all containers 
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | 70cf55e7554edaa85ba8c6eb2ffa05c545b83491355ee48701d47f4bcb56ca9f
# | ac96670a3ff19ac728ee0739333198de315ab3feed187d43f1f8da1cc2848e10
# | 839d4ec68f32dfe7d18e75e5ffa6fec6f176e8357770c4c938ae1531d357f31b
# | a7bce2f3519201c38bf07211a8248d131e96d475641ca4d4523dff532b915989
# | d782303fb1936afd32f9216c0255c702dca3cd5b4c10131558dd22c0db9e9c37
# | db8671b4bc4f9eaf5f119cca11823fa898c08a096e683c4b091e22f284710f07
# | [ec2-user@ip-172-31-21-124 ~]$
# | [ec2-user@ip-172-31-21-124 ~]$ docker ps --all
# | Emulate Docker CLI using podman. Create /etc/containers/nodocker to quiet msg.
# | CONTAINER ID  IMAGE  COMMAND  CREATED  STATUS  PORTS  NAMES
# | [ec2-user@ip-172-31-21-124 ~]$
# |
#
#
#



