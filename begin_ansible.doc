# ----------------------------------------------------------------------------------------------------------------------------------------
#  Chapter 01 : Ansible Installation and Configurations
# ----------------------------------------------------------------------------------------------------------------------------------------
#
# * Ansible requirements 
# Ansible is a configuration management tool which developed on top of python. 
# Stable versions are available with Python2 and active development is happening in the python3 branch.
# This course is mainly focused on the python 2 based ansible. 
#
# * Ansible supported platforms 
# Ansible is cross platform configuration management tool which supports 
#
# . Different distributions of Linux such as Redhat, ubuntu, CentOS etc 
# . Mac
# . Windows 
#
# On all these platforms you can use either platform specific package manager or python's pip utility to install ansible 
#
# * Ansible environment setup
# Our Lab setup throughout the course will be as follows
#
# Master   : ansiblemaster01.svr.apac.sathsang.net [ CentOS 6.9 ]
# client 1 : clientnode01.svr.apac.sathsang.net    [ CentOS 7.3 ]
# client 2 : clientnode02.svr.apac.sathsang.net    [ CentOS 7.3 ]
# client 3 : clientnode03.svr.apac.sathsang.net    [ CentOS 7.3 ]
#
# * Installing ansible master 
# To install ansisble master server, you will need to just install the ansible packe from the epel repo 
#
# Example : Sample procedure to install ansible master
#
# | [root@ansiblemaster01 .ssh]# yum -q install ansible --enablerepo=epel
# | Package ansible-2.5.3-1.el6.noarch already installed and latest version
# | [root@ansiblemaster01 .ssh]# rpm -qa| grep -i ansible
# | ansible-2.5.3-1.el6.noarch
# | [root@ansiblemaster01 .ssh]#
#
# * Configuration file  
# This will holds the key config parameters or variables required for ansible to work. 
# In case you need any customization to default config parameters, then you will need to make the change in this file 
#
# Default location : /etc/ansible/ansible.cfg
#
# Example : sample config details 
# 
# | [root@ansiblemaster01 .ssh]# grep -C1 hosts /etc/ansible/ansible.cfg
# | inventory      = /etc/ansible/hosts
# | library        = /usr/share/my_modules/
# | [root@ansiblemaster01 .ssh]#
# 
# * Inventory file
# This will the key file which Ansible uses to store its client information. 
# There are multiple ways you can store the client information on this file, either by doing the grouping or the  yaml method. 
# We will see details on this file at later part of the course. 
#
# Default loation :  /etc/ansible/hosts
#
# Example : Below example will show details about our clients from inventory file 
#
# | [root@ansiblemaster01 .ssh]# tail -8 /etc/ansible/hosts
# | #
# | # Sathsang infra clients
# | #
# | [sathsang_hosts]
# | clientnode01.svr.apac.sathsang.net
# | clientnode02.svr.apac.sathsang.net
# | clientnode03.svr.apac.sathsang.net
# | #
# | [root@ansiblemaster01 .ssh]#
# 
# * Setting up a client
# Setting up a client will involve 4 different steps
#
# 1. Update the client information in the inventory file '/etc/ansible/hosts'
# 2. Setup master server's ssh key 
# 3. Copy it over to the clients 
# 4. Test the communication using the ping module
# 
# Example : Please see below walkthrough to understand above procedure 
#
# 1. Updating inventory file 
# 
# | [root@ansiblemaster01 .ssh]# tail -8 /etc/ansible/hosts
# | # 
# | # Sathsang infra clients 
# | #
# | [sathsang_hosts]
# | clientnode01.svr.apac.sathsang.net
# | clientnode02.svr.apac.sathsang.net
# | clientnode03.svr.apac.sathsang.net
# | #
# | [root@ansiblemaster01 .ssh]# 
# 
# 2. Making sure already an ssh key available
# 
# | [root@ansiblemaster01 ansible]# ssh-keygen -t rsa
# | Generating public/private rsa key pair.
# | Enter file in which to save the key (/root/.ssh/id_rsa): 
# | /root/.ssh/id_rsa already exists.
# | Overwrite (y/n)? n
# | [root@ansiblemaster01 ansible]# 
# | [root@ansiblemaster01 ansible]# cd ~
# | [root@ansiblemaster01 ~]# cd .ssh/
# | [root@ansiblemaster01 .ssh]# pwd
# | /root/.ssh
# | [root@ansiblemaster01 .ssh]# 
# | [root@ansiblemaster01 .ssh]# ls
# | authorized_keys  id_rsa  id_rsa.pub  known_hosts
# | [root@ansiblemaster01 .ssh]#
# 
# 
# 3. Copy the Master's ssh key over to the clients using 'ssh-copy-id'
# 
# | [root@ansiblemaster01 .ssh]#ssh-copy-id clientnode01.svr.apac.sathsang.net
# | 
# | Now try logging into the machine, with "ssh 'clientnode01.svr.apac.sathsang.net'", and check in:
# | 
# |   .ssh/authorized_keys
# | 
# | to make sure we haven't added extra keys that you weren't expecting.
# | 
# | [root@ansiblemaster01 .ssh]# 
# 
# 
# 4. Test the connectivity using the ansible ping module 
# 
# | [root@ansiblemaster01 .ssh]# ansible clientnode01.svr.apac.sathsang.net -m ping 
# | 
# | clientnode01.svr.apac.sathsang.net | SUCCESS => {
# |    "changed": false, 
# |    "ping": "pong"
# | }
# | [root@ansiblemaster01 .ssh]
#
#
# ----------------------------------------------------------------------------------------------------------------------------------------
# Chapter 02 : Ansible architecure and design - Inventory
# ----------------------------------------------------------------------------------------------------------------------------------------
#
# * Ansible Inventory
# Ansible maintain its host inventory via file '/etc/ansible/hosts'. 
# To manage inventory you should be knowing about various methods available to manage hosts for various requirements. 
#
# * Connecting via different port number 
# Normally ssh connections which established through ansible will be connected via the default port number 22. 
# But there will be scenarios where you might need to connect via different port number, there are i two methods for connecting clients via different port number 
#
# - Method 1 : You can connect port using parameter 'ansible_port = <port_number>'
#   Syntax : client01.example.com ansible_port = <port_number>
#
# - Method 2 : You can connect port using traditional unix ':' method 
#   Syntax : client01.example.com:<port>
# 
# Example : Below example will show how to connect to client via different port
#
# | $ more /etc/ansible/hosts
# | [sathsang_one_infra]
# | clientnode01.svr.apac.sathsang.net
# | clientnode02.svr.apac.sathsang.net:22			==> This is one way connecting via port
# | 
# | [sathsang_two_infra]
# | clientnode03.svr.apac.sathsang.net ansible_port=2222	==> This is another way of connecting using parameter 'ansible_port'
# | $
# | $ ansible '*' -m ping -o
# | clientnode01.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | clientnode03.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | clientnode02.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | $
#
# * Connecting via user
# When you try to connect to clients from ansible it normally try to connect to client as the current user via ssh and runs the command. 
# User which ansible trying to login on the remote host must be available in the client host. 
# In case you want ansible to connect the client via some specific 'user' or 'su' or for 'sudo' there are few methods.
#
# - Connect via specific user  : You can use 'ansible_user=<user>' paramater to connect via an user
#                                This user can be either root or normal user, based on the level of trust it created it will make the connection. 
# Syntax : client.example.com ansible_user=root
#   
# Example : Below example will show us the usage of running as a specific user
#
# | $ tail -2 /etc/ansible/hosts
# | [sathsang_two_infra]
# | clientnode03.svr.apac.sathsang.net ansible_port=2222 ansible_user=root
# | [root@ansiblemaster01 .ssh]# ansible clientnode03.svr.apac.sathsang.net -m ping -o
# | clientnode03.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | $
#
# - Conneting and sudo to root  : This method will will login remotely and swicth to sudo, here we will need to provide the parameter for password too
#   Syntax : client.example.com ansible_become=true ansible_password=<password>
#
# NOTE : To store password there are options like vault which provided by ansible, that we will take a look at later 
#
# Example : Below example will show the details about how to connect to different host via specific user
#
# | $ head -2  /etc/ansible/hosts
# | [sathsang_one_infra]
# | clientnode01.svr.apac.sathsang.net ansible_become=true ansible_become_pass=Appu@725
# | [root@ansiblemaster01 .ssh]# ansible clientnode01.svr.apac.sathsang.net -m ping -o
# | clientnode01.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | $
#
# * Using Ranges
# Ratherthan defining the whole hostname you can specify the hostnames with some matching patterns. 
# You can use ranges like '[0:9]' '[a:z]' for this 
#
# Example : Below example will show how to use range
#
# | $ head -2 /etc/ansible/hosts
# | [sathsang_one_infra]
# | clientnode0[1:2].svr.apac.sathsang.net
# | $
# | $ ansible sathsang_one_infra -m ping -o
# | clientnode01.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | clientnode02.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | $
# | $ ansible all --list-hosts
# |   hosts (3):
# |    clientnode03.svr.apac.sathsang.net
# |    clientnode01.svr.apac.sathsang.net
# |    clientnode02.svr.apac.sathsang.net
# | $ 
#
# * Using variable delcarations 
# In above topics we have seen assigning few custom variables along with hostname to change the default behavior. 
# Just like using 'ansible_become', 'ansible_become_pass' or 'ansible_user' . 
# Similar to grouping our clients in 'hosts' file, we can also group the variables needed for that host group using 'vars'
#
# Syntax : Below is the syntax for using variables 
# 
# [host_group]
# client1.example.com
# client2.example.com
#
# [host_group:vars]
# variable_one=value_one
# variable_two=value_two
#
# Example : In below example we are separating the variables for 'sathsang_two_infra'
#
# | $ tail -6  hosts
# | [sathsang_two_infra]
# | clientnode03.svr.apac.sathsang.net
# | 
# | [sathsang_two_infra:vars]
# | ansible_port=2222
# | ansible_user=root
# | $ ansible clientnode03.svr.apac.sathsang.net -m ping -o
# | clientnode03.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | $ 
#
# * Children declaration
# In ansible there is way to declare the children classification which is a way to group together similar node definitions in the inventory. 
# When few host definitions under the  child definition are brought under a single parent, then all those children can inherit the property of the parent.
# That means when you assign an attribute for the parent then you will be able to get that inhertited in the children definitions. 
#
# Syntax : Below example will show you how to manage a child declaration
#
# [parent_group:children]
# child_group_one
# child_group_two
#
# Example : Below is an example for defining children classification 
#
# | root@ansiblemaster01 ~]# tail -7 /etc/ansible/hosts
# | [sathsang_infra:children]
# | sathsang_one_infra
# | sathsang_two_infra
# | 
# | [backend_hosts]
# | dnsserver01.svr.apac.sathsang.net
# | dockerstation01.svr.apac.sathsang.net
# | [root@ansiblemaster01 ~]# 
# | [root@ansiblemaster01 ~]# ansible -m ping backend_hosts -o
# | dnsserver01.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | dockerstation01.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | [root@ansiblemaster01 ~]# 
# | [root@ansiblemaster01 ~]# ansible -m ping sathsang_infra -o
# | clientnode01.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | clientnode02.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | clientnode03.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | [root@ansiblemaster01 ~]#
#
# NOTE : When you assign an attribute for parent definition incase that attribute already defined under clild definition then the child definition will take over the precedence.
#        
# Example : For demonstration purpose we will try to add a ansible_port for sathsang definition
#
# [root@ansiblemaster01 ~]# more /etc/ansible/hosts
# | [sathsang_one_infra]
# | clientnode0[1:2].svr.apac.sathsang.net
# | 
# | [sathsang_two_infra]
# | clientnode03.svr.apac.sathsang.net
# | 
# | [sathsang_two_infra:vars] 
# | ansible_port=2222
# | ansible_user=root
# | 
# | [sathsang_infra:children]
# | sathsang_one_infra
# | sathsang_two_infra
# | 
# | [sathsang_infra:vars]			==> Here we are trying to assign a port number for parent 'sathsang_infra' where 'sathsang_two_infra' already has the same attribute defined.
# | ansible_port=1234
# | 
# | [backend_hosts] 
# | dnsserver01.svr.apac.sathsang.net
# | dockerstation01.svr.apac.sathsang.net
# | [root@ansiblemaster01 ~]# 
# | [root@ansiblemaster01 ~]# ansible -m ping sathsang_infra -o
# | clientnode01.svr.apac.sathsang.net | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host clientnode01.svr.apac.sathsang.net port 1234: No route to host
# | clientnode02.svr.apac.sathsang.net | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host clientnode02.svr.apac.sathsang.net port 1234: No route to host
# | clientnode03.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | [root@ansiblemaster01 ~]# 
#
# On the above example you will see clientnode01 and 02 tried communicate via port number 1234 and failed, where 03 was able to be success it has a explict definition in its child declaration
#
# * YAML - based host inventory
# You can also represent your inventory in YAML format, For that you will need to update the inventory variable in the '/etc/ansible/ansible.cfg' file. 
# You will need to change the variable from '/etc/ansible/hosts' to '/etc/ansible/hosts.yml' to represent it as in yaml format.
# 
# Example : Below is the sample configuration for ansible.cfg, hosts.yml and a test command using a ping module
#
# | [root@ansiblemaster01 ~]# grep inventory /etc/ansible/ansible.cfg|head -2
# | #inventory      = /etc/ansible/hosts
# | inventory      = /etc/ansible/hosts.yml
# | [root@ansiblemaster01 ~]# more /etc/ansible/hosts.yml
# | ---
# |   sathsang_one_infra:
# |     hosts:
# |       clientnode0[1:2].svr.apac.sathsang.net:
# | 
# |   sathsang_two_infra:
# |     hosts: 
# |       clientnode03.svr.apac.sathsang.net:
# |     vars:
# |       ansible_port: 2222
# |       ansible_user: root
# | 
# |   sathsang_infra:
# |     children:
# |       sathsang_one_infra:
# |       sathsang_two_infra:
# |     vars:
# |       ansible_port: 12345
# | 
# |   backend_hosts:
# |     hosts:
# |       dnsserver01.svr.apac.sathsang.net:
# |       dockerstation01.svr.apac.sathsang.net:
# | ...
# | [root@sathsang Ansible]#
# | [root@ansiblemaster01 ~]# ansible -m ping sathsang_infra -o
# | clientnode02.svr.apac.sathsang.net | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host clientnode02.svr.apac.sathsang.net port 12345: No route to host
# | clientnode01.svr.apac.sathsang.net | UNREACHABLE!: Failed to connect to the host via ssh: ssh: connect to host clientnode01.svr.apac.sathsang.net port 12345: No route to host
# | clientnode03.svr.apac.sathsang.net | SUCCESS => {"changed": false, "ping": "pong"}
# | [root@ansiblemaster01 ~]# 
# | [root@sathsang Ansible]# 
# |
#
# NOTE : You can see the difference with the earlier hosts file and this hosts.yml to understand the difference in definitions 
#
# * JSON - based inventory
# Similar to YAML you can host your inventory in JSON also, to do that you will need to update the 'inventory' paramter in the 'ansible.cfg'. 
# Also you will need to format your hosts.json file according to the JSON markup notations. 
#
# Example : Below example will give you an idea bout how to work with JSON inventory
#
# | [root@ansiblemaster01 ~]# more /etc/ansible/hosts.json 
# | {
# |   "sathsang_one_infra": {
# |     "hosts": {
# |        "clientnode0[1:2].svr.apac.sathsang.net": null,
# |      },
# |   },
# | 
# |   "sathsang_two_infra": {
# |     "hosts": {
# |       "clientnode03.svr.apac.sathsang.net": null,
# |     },
# |     "vars": {
# |       "ansible_port": "2222",
# |       "ansible_user": "root",
# |     },
# |   },
# | 
# |   "sathsang_infra" : {
# |     "children": {
# |       "sathsang_one_infra",
# |       "sathsang_two_infra",
# |     },
# |   },
# | 
# |   "sathsang_infra": {
# |     "vars": {
# |       "ansible_port": "1234",
# |     },
# |   },
# | 
# |   "backend_hosts": {
# |     "hosts": {
# |       "dnsserver01.svr.apac.sathsang.net": null,
# |       "dockerstation01.svr.apac.sathsang.net": null,
# |     },
# |   },
# | }
# | [root@ansiblemaster01 ~]# ansible -m ping backend_hosts
# |  [WARNING]: While constructing a mapping from /etc/ansible/hosts.json, line 1, column 1, found a duplicate dict key (sathsang_infra). Using last defined value only.
# | 
# | dnsserver01.svr.apac.sathsang.net | SUCCESS => {
# |     "changed": false, 
# |     "ping": "pong"
# | }
# | dockerstation01.svr.apac.sathsang.net | SUCCESS => {
# |     "changed": false, 
# |     "ping": "pong"
# | }
# | [root@ansiblemaster01 ~]# 
# | 
#
# NOTE : Details description for host inventory available at url 
# URL  : https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html
#
# ----------------------------------------------------------------------------------------------------------------------------------------
# Chapter 03: Ansible architecure and design - Modules
# ----------------------------------------------------------------------------------------------------------------------------------------
#
# * Idempotency
# Ansible always possess idempotency, that means if a resource is already implemented and it doesn't neeed any further changes then ansible won't make any changes. 
# Regardless how many times you run the same, end state will remain same, but if anytime it finds a change from its source code then it will make the change. 
#
# * Color codes 
# Ansible posses three difefrent color codes to understand its various states and details given below. 
#
# Green  : Success and no changes taken place 
# Yellow : Success with changes taken place 
# Red    : Failed 
#
# * Module - Setup()
# Setup module is responsible to get the facter information from the client. 
# Facter informations are set of variables which provides the current state of the system. 
# Facters can be used in playbooks to deal with wide variety of conditions according to system state. 
#
# Example : Below is a sample output of collecting facts from system using the setup modules 
#
# | [root@ansiblemaster01 ~]# ansible dnsserver01.svr.apac.sathsang.net -m setup
# | dnsserver01.svr.apac.sathsang.net | SUCCESS => {
# |     "ansible_facts": {
# |         "ansible_all_ipv4_addresses": [
# |             "192.168.122.20"
# |         ],
# |         "ansible_all_ipv6_addresses": [
# |             "fe80::5054:ff:fea5:ab7c"
# |         ],
# |         "ansible_apparmor": {
# |             "status": "disabled"
# |         },
# |         "ansible_architecture": "x86_64",
# |         "ansible_bios_date": "04/01/2014",
# |         "ansible_bios_version": "1.9.3-1.fc25",
# |         "ansible_cmdline": {
# |             "KEYBOARDTYPE": "pc",
# |             "KEYTABLE": "us",
# |             "LANG": "en_US.UTF-8",
# |             "SYSFONT": "latarcyrheb-sun16",
# |             "quiet": true,
# |             "rd_LVM_LV": "vg_dnsserver01/lv_swap",
# |             "rd_NO_DM": true,
# |             "rd_NO_LUKS": true,
# |             "rd_NO_MD": true,
# |             "rhgb": true,
# |             "ro": true,
# |             "root": "/dev/mapper/vg_dnsserver01-lv_root"
# |
#
# * Module - Command()
# Command module is the default module used in ansible, that means it can be run along with the ansible command without even specifying the '-m' keyword.
# This will help you to fetch the command output from a remote system. 
#
# URL : https://docs.ansible.com/ansible/latest/modules/command_module.html#command-module
#
# Syntax : ansible <hostname|host_group> command 'command_to_execute'
#
# Example : See below example for command module 
#
# | [root@ansiblemaster01 ~]# ansible all -m command -a  'uname -a' -o
# | clientnode02.svr.apac.sathsang.net | CHANGED | rc=0 | (stdout) Linux clientnode02.svr.apac.sathsang.net 3.10.0-514.16.1.el7.x86_64 #1 SMP Wed Apr 12 15:04:24 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
# | clientnode01.svr.apac.sathsang.net | CHANGED | rc=0 | (stdout) Linux clientnode01.svr.apac.sathsang.net 3.10.0-514.16.1.el7.x86_64 #1 SMP Wed Apr 12 15:04:24 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
# | dockerstation01.svr.apac.sathsang.net | CHANGED | rc=0 | (stdout) Linux dockerstation01.svr.apac.sathsang.net 2.6.32-696.1.1.el6.x86_64 #1 SMP Tue Apr 11 17:13:24 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
# | dnsserver01.svr.apac.sathsang.net | CHANGED | rc=0 | (stdout) Linux dnsserver01.svr.apac.sathsang.net 2.6.32-696.1.1.el6.x86_64 #1 SMP Tue Apr 11 17:13:24 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
# | clientnode03.svr.apac.sathsang.net | CHANGED | rc=0 | (stdout) Linux clientnode03.svr.apac.sathsang.net 3.10.0-514.16.1.el7.x86_64 #1 SMP Wed Apr 12 15:04:24 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux
# | [root@ansiblemaster01 ~]#
#
#
# * Module - File
# File moduls will help to create files on a remote system, for that matter you can create files in the same system too. 
#
# URL : https://docs.ansible.com/ansible/2.5/modules/file_module.html#file-module
# Syntax : Below is an example of using Ansible file module along with file resource 
#        : ansible <hostname|hostgroup> -m file -a "path=</<file_name> state=<desired_state> mode=<permission>"
#
# Example : Below example will show how to create a file 
# 
# | [root@ansiblemaster01 ~]# ansible dockerstation01.svr.apac.sathsang.net -m file -a 'path='/tmp/test' state=touch mode='755''
# | dockerstation01.svr.apac.sathsang.net | SUCCESS => {
# |     "changed": true,
# |     "dest": "/tmp/test",
# |     "gid": 0,
# |     "group": "root",
# |     "mode": "0755",
# |     "owner": "root",
# |     "secontext": "unconfined_u:object_r:user_tmp_t:s0",
# |     "size": 0,
# |     "state": "file",
# |     "uid": 0
# | }
# | [root@ansiblemaster01 ~]#
# |
#
# * Module - Copy
# Copy modules will help to create files to a remote system as well as a local. 
# 
# URL : https://docs.ansible.com/ansible/2.5/modules/copy_module.html#copy-module
# Syntax : Below is an example of using Ansible copy module 
#        : ansible <hostname|hostgroup> -m copy 'remote_src=<yes|no> src=<file> dest=<file_location>'
#
# Example : Below is the example of copying a file to remore host 
#
# | [root@ansiblemaster01 ~]# ansible dockerstation01.svr.apac.sathsang.net -m copy -a 'remote_src=yes src=/tmp/test dest=/tmp/test'
# | dockerstation01.svr.apac.sathsang.net | SUCCESS => {
# |    "changed": false,
# |    "checksum": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
# |    "dest": "/tmp/test",
# |     "gid": 0,
# |     "group": "root",
# |     "md5sum": "d41d8cd98f00b204e9800998ecf8427e",
# |    "mode": "0755",
# |    "owner": "root",
# |    "secontext": "unconfined_u:object_r:user_tmp_t:s0",
# |    "size": 0,
# |    "src": "/tmp/test",
# |    "state": "file",
# |    "uid": 0
# | }
# | [root@ansiblemaster01 ~]#
#
# * Ansible-doc (documentation for modules)
# Anisble-doc utility provides a documentation link to the ansible modules. 
# This will provide you both command line as well as the playbook related examples too, so that you can have reference. 
#
# Syntax : ansible-playbook <module_name>
#
# ----------------------------------------------------------------------------------------------------------------------------------------
# Chapter 04 : Ansible architecure and design - YAML
# ----------------------------------------------------------------------------------------------------------------------------------------
#
# * YAML playbook structure 
# Below is the structure of a playbook 
#
# Start with  : ---
# Ends with   : ...
# 
# YAML is a very simple, text/human-readable annotation format that can be used to store data. 
# It is natively supported by Bukkit and almost every plugin uses it. CraftIRC's configuration file, config.yml, uses it; 
# It's important that you do not break the formatting while you are editing it or the plugin won't run.
# 
# Programmers deal with much more complicated stuff without blinking twice, so if you really want to run a server don't be a lazy jackass and make an effort to understand this. 
# It will be useful knowledge for every plugin!
# Basic principles to remember while working with config.yml:
# 
#     Always save using the UTF-8 encoding to minimize the possibility of errors.
#     Never, EVER use the TAB character anywhere in it.
#     Editing with a WYSIWYG text processor, such as Microsoft Word, is not recommended.
#     Use a monowidth/monospaced font to view the contents. Examples you may have in your computer: Fixedsys, Lucida Console, Consolas, Monaco, DejaVu Sans Mono, Courier New.
# 
# Whenever you see the # character anywhere in the file that isn't first enclosed in '' (quotes) or "" (double quotes), it marks the beginning of a comment. 
# This means all the text after it, up until the end of the line, is completely ignored and has no effect. You can use this to write notes on the file or temporarily disable one or more options.
# 
# These are all comments:
# 
# | # debug: false
# | # Hello there, how are you?
# debug: false # <- The line is read up to this character!
# 
# This is not commented: 
# | name: '#changeme'
# 
# But this is!:
# | #name: '#changeme'
# 
# Key-value pairs
# YAML keeps data stored as a map containing keys and values associated to those keys. This map is in no particular order, so you can reorder it at will. Each pair is in the format KEY: VALUE. For example:
# 
# | minecraft-tag: 'minecraft'
# | cancelled-tag: 'cancelled'
# 
# Note the 'quotes' around the value. When the value is a text string, we use the quotes to make sure any special characters aren't given special meaning, and instead are all kept as part of the value. 
# So even though they are optional, using them is highly recommended.
# 
# Other than text, numbers and true/false, the value associated to a key can also be another map of key-value pairs. 
# To achieve this, omit the value and instead write the key-value pairs in the following lines. 
# However, you must prefix them with at least one more SPACE character than the key.
# 
# YAML will consider that lines prefixed with more spaces than  parent key are contained inside it; Moreover, all lines must be prefixed with the same amount of spaces to belong to the same map. So this works
# 
# formatting:
#
# |  from-game:
# |    chat: '(%sender%) %message%'
# |    action: '* %sender% %message%'
# 
# This works too:
# 
# formatting:
#
# |        from-game:
# |                chat: '(%sender%) %message%'
# |                action: '* %sender% %message%'
#
# But this doesn't work:
# 
# formatting:
#
# | from-game:
# | chat: '(%sender%) %message%'
# | action: '* %sender% %message%'
# 
# Alternative format
# 
# YAML supports an alternative syntax to store key-value maps, useful for compressing small maps into a single line. The syntax is: {KEY: VALUE, KEY: VALUE, ...}. The above example would become:
# 
# formatting: 
# |{from-game: {chat: '(%sender%) %message%', action: '* %sender% %message%'}}
# 
# Lists
# 
# There is one other data structure from YAML we need to use - The list. 
# Lists are used to store a collection of ordered values. The values are not associated with a key, only with a positional index obtained from the order in which they are specified (item 1, item 2, etc.).
# 
# | mylist:
# | - 'item 1'
# | - 'item 2'
# 
# Like key-value pairs, list items are defined in the lines below the list key, all with the same amount of spaces prefixing them (at least as many spaces as the parent key). 
# The difference is that they begin with a dash (-). Here's another valid list:
# 
# | mylist:
# |    - 100
# |    - 200
# 
# Now, remember how you could put key-value maps inside key-value maps? You can do the same with lists. You can have:
#     Maps inside maps (as seen in the previous section)
#     Lists inside maps (as seen immediately above - lists are, by default, inside maps, since they need a key)
#     Maps inside lists
# 
# | channels:
# |  - name: '#mychannel'
# |    password: ''
# |  - name: '#myprivatechannel'
#     password: 'mypassword'
# 
#     Lists inside lists (not currently used in CraftIRC)
# 
# twobytwotable:
# |  - - 'a1'
# |    - 'a2'
# |  - - 'b1'
# |    - 'b2'
# 
# Alternative format
# Guess what, there's also a one-line format for lists! It is [ITEM1, ITEM2, ITEM3, ...]. Here's the above example:
# 
# | twobytwotable: [ ['a1', 'a2'], ['b1', 'b2'] ]
#
# * How Ansisble uses YAML
# Anisble converts the YAML files into python format using the python  YAML modules.
# You can also see how to convert the YAMl to JSON, PYTHON and other format using below url.
#
# URL : https://yaml-online-parser.appspot.com/
#
#  Example : You can see below script to convert an YAML file into python dictionary format 
#
# | #!/usr/bin/python
# | #
# | #
# | import yaml
# | #
# | #
# | filename = '/etc/ansible/hosts.yml'
# | #
# | #
# | def check_yaml_content(file_name):
# | 
# |     file_dict = yaml.load(open(file_name))
# |     for keys in file_dict:
# |       print  (keys ,  file_dict[keys])
# | #
# | #
# | #
# | check_yaml_content(filename)
# | #
# | #
#
# ----------------------------------------------------------------------------------------------------------------------------------------
# Chapter 05 : Ansible playbook and structuring
# ----------------------------------------------------------------------------------------------------------------------------------------
# In this secton, we will talk about various different things in ansible playbook such as, 
#
# . The different sections in ansible playbook 
# . How to use the target section 
# . How to make use of the task section 
# . How to make use of the vars section 
# . How to make use of the handlers 
#
# * Different sections in ansibe playbook 
# Below are the different sections in an Ansible YAML playbook 
#
# ---			=> Ansible playbooks are written in YAML, so they starts always with the '---' to indicate the beginiing of the document
#   -   		=> Dash indicates the following is a list, Ansible playbook contains a list of tasks 
#     Target: 		=> Target section indicates where our play will run and the options it will run with 
#       Variable: 	=> Variable that will apply to play on all target systems
#       Task:		=> List of tasks that will be executed within the playbook
#       Handlers:	=> Handlers that are executed as a notify key from a task 
#       Roles:		=> List of roles that need to be executed from play
# ...			=> An ansible YAML playbook always ends with ...
#
# NOTE : To know more about the ansible playbook sections, you can refer below link 
#
# URL : https://docs.ansible.com/ansible/2.5/reference_appendices/playbooks_keywords.html
#
# * Using Target and tasks section
# Below playbook will help us to understand about how to use the Target and taks sections 
#
# Example : Below play will be useful to push motd file into sathsang_one_infra
#
# NOTE : playbook 
#
# | [root@ansiblemaster01 motd]# more motd_playbook.yml 
# | ---
# |   # Target section : Defines where and who will run
# | - hosts: sathsang_one_infra
# |   user: root 
# | 
# |   # Tasks section : What action to be performed 
# |   tasks: 
# |     - name: To update MOTD message in the sathsang_infra_one
# |       copy: 
# |         src: motd_sathsang_infra_one
# |         dest: /etc/motd
# | ...
# | [root@ansiblemaster01 motd]# 
#
# NOTE : First run  and you could see changed = 1 
#
# | root@ansiblemaster01 motd]# ansible-playbook motd_playbook.yml 
# |
# | PLAY [sathsang_one_infra] ***********************************************************************************************************************************************************************************
# | 
# | TASK [Gathering Facts] **************************************************************************************************************************************************************************************
# | ok: [clientnode02.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | 
# | TASK [To update MOTD message in the sathsang_infra_one] *****************************************************************************************************************************************************
# | changed: [clientnode02.svr.apac.sathsang.net]
# | changed: [clientnode01.svr.apac.sathsang.net]
# | 
# | PLAY RECAP **************************************************************************************************************************************************************************************************
# | clientnode01.svr.apac.sathsang.net : ok=2    changed=1    unreachable=0    failed=0   
# | clientnode02.svr.apac.sathsang.net : ok=2    changed=1    unreachable=0    failed=0   
# | 
# | [root@ansiblemaster01 motd]#
#
# NOTE : This is the second run and you could see changed = 0 since its found the file already in desired state 
#
# | [root@ansiblemaster01 motd]# ansible-playbook motd_playbook.yml 
# | 
# | PLAY [sathsang_one_infra] ******************************************************************************************************************************************************************
# | 
# | TASK [Gathering Facts] *********************************************************************************************************************************************************************
# | ok: [clientnode01.svr.apac.sathsang.net]
# | ok: [clientnode02.svr.apac.sathsang.net]
# | 
# | TASK [To update MOTD message in the sathsang_infra_one] ************************************************************************************************************************************
# | ok: [clientnode02.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | 
# |PLAY RECAP **********************************************************************************************************************************************************************************
# | clientnode01.svr.apac.sathsang.net : ok=2    changed=0    unreachable=0    failed=0   
# | clientnode02.svr.apac.sathsang.net : ok=2    changed=0    unreachable=0    failed=0   
# | 
# | [root@ansiblemaster01 motd]#
#
# * Using variables in playbook
# Variables are used in the playbook
# Below we will modify the same playbook which we seen above using the vars section, here we will not use the 'copy' module copy file, rather than we will content to access the variable 
#
# NOTE : In below play book couple of things to note 
#        . We have switched off facts collection using 'gather_facts' since this doesnot have much relevance in this playbook requirement
#        . We have introduced variable, here we have defined a global variable and used the vairable with 'content' parameter in the 'copy' module
#
# | [root@ansiblemaster01 motd]# more  motd_playbook.yml
# | ---
# |   # Target section: Defines where and who will run
# | - hosts: sathsang_one_infra
# |   user: root
# |   gather_facts: false	
# | 
# |   # variable section
# |   vars:
# |     motd_message: "This is a MOTD message came from the vars section"
# | 
# |   # Tasks section : What action to be performed
# |   tasks:
# |    - name: To update MOTD message in the sathsang_infra_one
# |      copy:
# |        content: "{{ motd_message }}"
# |        dest: /etc/motd
# | ...
# | [root@ansiblemaster01 motd]#
#
# Note : below is the execution of this playbook 
#
# | [root@ansiblemaster01 motd]# ansible-playbook motd_playbook.yml
# | 
# | PLAY [sathsang_one_infra] ************************************************************************************************************************************************
# | 
# | TASK [To update MOTD message in the sathsang_infra_one] ******************************************************************************************************************
# | changed: [clientnode01.svr.apac.sathsang.net]
# | changed: [clientnode02.svr.apac.sathsang.net]
# | 
# | PLAY RECAP ****************************************************************************************************************************************************************
# | clientnode01.svr.apac.sathsang.net : ok=1    changed=1    unreachable=0    failed=0
# | clientnode02.svr.apac.sathsang.net : ok=1    changed=1    unreachable=0    failed=0
# | 
# | [root@ansiblemaster01 motd]#
#
# * Using handlers
# Handlers can be used to define the notify message which can be executed along with the task
# 
# NOTE : We will modify our sample playbook with handlers to notify the messages below 
#
# | [root@ansiblemaster01 motd]# more  motd_playbook.yml
# | ---
# |   # Target section: Defines where and who will run
# | - hosts: sathsang_one_infra
# |   user: root
# |   gather_facts: false
# |
# |   # variable section
# |   vars:
# |     motd_message: "This is a MOTD message came from the variable section"
# |
# |   # Tasks section : What action to be performed
# |   tasks:
# |     - name: To update MOTD message in the sathsang_infra_one
# |       copy:
# |         content: "{{ motd_message }}"
# |         dest: /etc/motd
# |       notify: MOTD change
# |
# |   # Handlers will help to notify using the task section
# |   handlers:
# |     - name: MOTD change
# |       debug:
# |         msg: MOTD file successfully changed
# | ...
# | [root@ansiblemaster01 motd]#
# |
#
# NOTE : Below output you can see handlers are getting executed when changes are made on the host, refer to 'changed = 1'
#
# | [root@ansiblemaster01 motd]# ansible-playbook motd_playbook.yml 
# | 
# | PLAY [sathsang_one_infra] **************************************************************************************************************************************************************
# | 
# | TASK [To update MOTD message in the sathsang_infra_one] ********************************************************************************************************************************
# | changed: [clientnode02.svr.apac.sathsang.net]
# | changed: [clientnode01.svr.apac.sathsang.net]
# | 
# | RUNNING HANDLER [MOTD change] **********************************************************************************************************************************************************
# | ok: [clientnode02.svr.apac.sathsang.net] => {
# |     "msg": "MOTD file successfully changed"
# | }
# | ok: [clientnode01.svr.apac.sathsang.net] => {
# |     "msg": "MOTD file successfully changed"
# | }
# | 
# | PLAY RECAP ****************************************************************************************************************************************************************************
# | clientnode01.svr.apac.sathsang.net : ok=2    changed=1    unreachable=0    failed=0   
# | clientnode02.svr.apac.sathsang.net : ok=2    changed=1    unreachable=0    failed=0   
# | 
#
# NOTE : Below output you can see handlers are not getting executed since there is no changes are made on the host, refer 'changed=0'
#
# | [root@ansiblemaster01 motd]# ansible-playbook motd_playbook.yml 
# | 
# | PLAY [sathsang_one_infra] ****************************************************************************************************************************************************************
# | 
# | TASK [To update MOTD message in the sathsang_infra_one] **********************************************************************************************************************************
# | ok: [clientnode02.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | 
# | PLAY RECAP ********************************************************************************************************************************************************************************
# | clientnode01.svr.apac.sathsang.net : ok=1    changed=0    unreachable=0    failed=0   
# | clientnode02.svr.apac.sathsang.net : ok=1    changed=0    unreachable=0    failed=0   
# | 
# | [root@ansiblemaster01 motd]# 
# | 
#                            
# * Gathering facts from clients 
# There will be times when we will need to take decission according to the facts variables we collect from clients. 
# By default facts will be collected during every ansible run, and this will be a default task which will be running until you disable it with 'gather_facts =no' paramter. 
# In case you want to collect the facts information from a node manually you could execute the setup module to retrive the information
#
# | $ ansible <nodename> -m setup
#
# Example : Below is a sample run for setup module to collect facts from the system and we are getting the fqdn value out of it 
#
# | [root@ansiblemaster01 motd]# ansible clientnode01.svr.apac.sathsang.net -m setup |grep fqdn 
# |         "ansible_fqdn": "clientnode01.svr.apac.sathsang.net", 
# |             "fqdn": "clientnode01.svr.apac.sathsang.net", 
# | [root@ansiblemaster01 motd]# 
#
# * When - using decission making on playbooks
# We can take decission making with 'when' attribute in anisble playbooks, this will help us to execute playbook only when certain conditions are met
# 
# NOTE : In below examplw we are modifying the playbook with the decisison making and also enabled gather facts
#
# | [root@ansiblemaster01 motd]# more motd_playbook.yml 
# | ---
# |   # Target section: Defines where and who will run
# | - hosts: all
# |   user: root 
# |   gather_facts: true
# | 
# |   # variable section 
# |   vars:
# |     centos6_motd_message: "You are logging into a CentOS 6 machine in sathsang infra"
# |     centos7_motd_message: "You are logging into a CentOS 7 machine in sathsang infra"
# | 
# |   # Tasks section : What action to be performed 
# |   tasks: 
# |     - name: To update MOTD message in CentOS 6 in the sathsang_infra_one
# |       copy:
# |         content: "{{ centos6_motd_message }}"
# |         dest: /etc/motd
# |       notify: CentOS 6 change
# |       when: ansible_distribution_major_version == "6"
# | 
# |     - name: 'To update MOTD message in CentOS 7 in the sathsang_infra_one'
# |       copy:
# |         content: "{{ centos7_motd_message }}"
# |         dest: /etc/motd
# |       notify: CentOS 7 change
# |       when: ansible_distribution_major_version == "7"
# | 
# |   # Handlers will help to notify using the task section 
# |   handlers: 
# |     - name: CentOS 6 change
# |       debug:
# |         msg: MOTD file successfully changed on CentOS 6 infra
# | 
# |     - name: CentOS 7 change
# |       debug:
# |         msg: MOTD file successfully changed on CentOS 7 infra
# | ...
# | [root@ansiblemaster01 motd]# 
#
# NOTE : Below is the first run where you can see motd getting applied in CentOS 6 clients and handlers are getting executed when its getting executed
#
# | [root@ansiblemaster01 motd]# ansible-playbook motd_playbook.yml 
# | 
# | PLAY [all] *********************************************************************************************************************************************************************************
# | 
# | TASK [Gathering Facts] *********************************************************************************************************************************************************************
# | ok: [dnsserver01.svr.apac.sathsang.net]
# | ok: [dockerstation01.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | ok: [clientnode02.svr.apac.sathsang.net]
# | ok: [clientnode03.svr.apac.sathsang.net]
# | 
# | TASK [To update MOTD message in CentOS 6 in the sathsang_infra_one] ***********************************************************************************************************************
# | skipping: [clientnode03.svr.apac.sathsang.net]
# | skipping: [clientnode01.svr.apac.sathsang.net]
# | skipping: [clientnode02.svr.apac.sathsang.net]
# | changed: [dnsserver01.svr.apac.sathsang.net]
# | changed: [dockerstation01.svr.apac.sathsang.net]
# | 
# | TASK [To update MOTD message in CentOS 7 in the sathsang_infra_one] *************************************************************************************************************************
# | skipping: [dnsserver01.svr.apac.sathsang.net]
# | skipping: [dockerstation01.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | ok: [clientnode02.svr.apac.sathsang.net]
# | changed: [clientnode03.svr.apac.sathsang.net]
# | 
# | RUNNING HANDLER [CentOS 6 change] ************************************************************************************************************************************************************
# | ok: [dnsserver01.svr.apac.sathsang.net] => {
# |     "msg": "MOTD file successfully changed on CentOS 6 infra"
# | }
# | ok: [dockerstation01.svr.apac.sathsang.net] => {
# |     "msg": "MOTD file successfully changed on CentOS 6 infra"
# | }
# | 
# | RUNNING HANDLER [CentOS 7 change] ************************************************************************************************************************************************************
# | ok: [clientnode03.svr.apac.sathsang.net] => {
# |     "msg": "MOTD file successfully changed on CentOS 7 infra"
# | }
# | 
# | PLAY RECAP ************************************************************************************************************************************************************************************
# | clientnode01.svr.apac.sathsang.net : ok=2    changed=0    unreachable=0    failed=0   
# | clientnode02.svr.apac.sathsang.net : ok=2    changed=0    unreachable=0    failed=0   
# | clientnode03.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | dnsserver01.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | dockerstation01.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | [root@ansiblemaster01 motd]# 
# | 
#
# NOTE : Below is the second run where you can see motd not getting changed
#
# | [root@ansiblemaster01 motd]# ansible-playbook motd_playbook.yml 
# | 
# | PLAY [all] *************************************************************************************************************************************************************************************
# | 
# | TASK [Gathering Facts] *************************************************************************************************************************************************************************
# | ok: [dnsserver01.svr.apac.sathsang.net]
# | ok: [dockerstation01.svr.apac.sathsang.net]
# | ok: [clientnode02.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | ok: [clientnode03.svr.apac.sathsang.net]
# | 
# | TASK [To update MOTD message in CentOS 6 in the sathsang_infra_one] ****************************************************************************************************************************
# | skipping: [clientnode03.svr.apac.sathsang.net]
# | skipping: [clientnode01.svr.apac.sathsang.net]
# | skipping: [clientnode02.svr.apac.sathsang.net]
# | ok: [dockerstation01.svr.apac.sathsang.net]
# | ok: [dnsserver01.svr.apac.sathsang.net]
# | 
# | TASK [To update MOTD message in CentOS 7 in the sathsang_infra_one] ****************************************************************************************************************************
# | skipping: [dnsserver01.svr.apac.sathsang.net]
# | skipping: [dockerstation01.svr.apac.sathsang.net]
# | ok: [clientnode03.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | ok: [clientnode02.svr.apac.sathsang.net]
# | 
# | PLAY RECAP *************************************************************************************************************************************************************************************
# | clientnode01.svr.apac.sathsang.net : ok=2    changed=0    unreachable=0    failed=0   
# | clientnode02.svr.apac.sathsang.net : ok=2    changed=0    unreachable=0    failed=0   
# | clientnode03.svr.apac.sathsang.net : ok=2    changed=0    unreachable=0    failed=0   
# | dnsserver01.svr.apac.sathsang.net : ok=2    changed=0    unreachable=0    failed=0   
# | dockerstation01.svr.apac.sathsang.net : ok=2    changed=0    unreachable=0    failed=0   
# | 
# | [root@ansiblemaster01 motd]# 
# | 
#
# NOTE : Roles will be discussed later 
#
# ----------------------------------------------------------------------------------------------------------------------------------------
# Chapter 06 : Ansible Playbooks, Breakdown of Sections
# ----------------------------------------------------------------------------------------------------------------------------------------
# * Variables - Handling variables in an advance ways
# When it comes to variables you will be able to handle many different formats such as list, dictionary and string variables in an YAML playbook.
# Here we will discuss how to handle such different data types in Ansible. 
#
# * String Variables 
# We have seen this already earlier how to handle a string variable, here we will assign the value to a variable and that can used with the playbook
#
# Syntax : variable_name : "value of the string"
#
# NOTE : Below example will tell you how to handle string variables 
#
# | [root@ansiblemaster01 print_message]# more /etc/ansible/roles/print_message/print_message.yml 
# | ---
# | 
# |   # Target section : will display where and who will run 
# |   - hosts: all
# |     user : root
# |     gather_facts: true
# |   
# |   # Variable section : to handle the string variables in this playbook
# |     vars: 
# |       dest_file_name : '/tmp/test_file'
# |       centos_6_message : ansible has just updated "{{ dest_file_name }}" on a CentOS 6 system
# |       centos_7_message : ansible has just updated "{{ dest_file_name }}" on a CentOS 7 system
# | 
# |   # Handlers : This will help to notify the message 
# |     handlers: 
# |       - name: CentOS 6 Message 
# |         debug: 
# |           msg: " {{ centos_6_message }} "
# |       - name: CentOS 7 Message
# |         debug: 
# |           msg: " {{ centos_7_message }} "
# | 
# |   # Tasks section : List of tasks to execute  
# |     tasks: 
# |       - copy: 
# |           content: "{{ centos_6_message }}"
# |           dest: "{{ dest_file_name }}"
# |         notify: CentOS 6 Message
# |         when: ansible_distribution_major_version  == "6"
# | 
# |       - copy: 
# |           content: "{{ centos_7_message }}"
# |           dest: "{{ dest_file_name }}"
# |         notify: CentOS 7 Message
# |         when: ansible_distribution_major_version == "7"
# | ...
# | [root@ansiblemaster01 print_message]# 
# | 
#
# Example : Below is the sample first run using the above playbook
#
# | [root@ansiblemaster01 print_message]# ansible-playbook print_message.yml 
# | 
# | PLAY [all] ******************************************************************************************************************************************************************************************
# | 
# | TASK [Gathering Facts] ******************************************************************************************************************************************************************************
# | ok: [dnsserver01.svr.apac.sathsang.net]
# | ok: [dockerstation01.svr.apac.sathsang.net]
# | ok: [clientnode02.svr.apac.sathsang.net]
# | ok: [clientnode03.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | 
# | TASK [copy] ****************************************************************************************************************************************************************************************
# | skipping: [clientnode03.svr.apac.sathsang.net]
# | skipping: [clientnode01.svr.apac.sathsang.net]
# | skipping: [clientnode02.svr.apac.sathsang.net]
# | changed: [dnsserver01.svr.apac.sathsang.net]
# | changed: [dockerstation01.svr.apac.sathsang.net]
# | 
# | TASK [copy] *****************************************************************************************************************************************************************************************
# | skipping: [dnsserver01.svr.apac.sathsang.net]
# | skipping: [dockerstation01.svr.apac.sathsang.net]
# | changed: [clientnode03.svr.apac.sathsang.net]
# | changed: [clientnode01.svr.apac.sathsang.net]
# | changed: [clientnode02.svr.apac.sathsang.net]
# | 
# | RUNNING HANDLER [CentOS 6 Message] ******************************************************************************************************************************************************************
# | ok: [dnsserver01.svr.apac.sathsang.net] => {
# |     "msg": " ansible has just updated \"/tmp/test_file\" on a CentOS 6 system "
# | }
# | ok: [dockerstation01.svr.apac.sathsang.net] => {
# |     "msg": " ansible has just updated \"/tmp/test_file\" on a CentOS 6 system "
# | }
# | 
# | RUNNING HANDLER [CentOS 7 Message] *******************************************************************************************************************************************************************
# | ok: [clientnode03.svr.apac.sathsang.net] => {
# |     "msg": " ansible has just updated \"/tmp/test_file\" on a CentOS 7 system "
# | }
# | ok: [clientnode01.svr.apac.sathsang.net] => {
# |     "msg": " ansible has just updated \"/tmp/test_file\" on a CentOS 7 system "
# | }
# | ok: [clientnode02.svr.apac.sathsang.net] => {
# |     "msg": " ansible has just updated \"/tmp/test_file\" on a CentOS 7 system "
# | }
# | 
# | PLAY RECAP *******************************************************************************************************************************************************************************************
# | clientnode01.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | clientnode02.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | clientnode03.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | dnsserver01.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | dockerstation01.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | 
# | [root@ansiblemaster01 print_message]#
#
# * Dictionary Variables 
# In this section we will take a look at how to handle dictionary variables using ansible playbook. 
# Below is the method you can define a dictionary in a YAML playbook for both keys value pair and also to associate keys with list of values
# 
# 1. Only Key value pair syntax 
#
# | vars: 
# |  dict_name:
# |      key1  : value1
# |      leys2 : value2
# 
# NOTE : Accessing the value : dictname.key1  or dict_name[key1]
#
# 2. Key with list of values 
#
# | vars: 
# |   dict_name: 
# |     key1 : 
# |       - item1
# |       - item2
# |       - item3
# |       - item4
#
# NOTE : Accessing the value : dictname.key1.index_number  or dict_name[key1][index_number]
#
# There are two ways you can access variables from dictionary within playbook, one if the YAML method and another is the python method, both are supported 
#
# 1. YAML method   -> dict_name.key_name 
# 2. Python Method -> dict_name['key_name'] 
#
# NOTE : We are going to update the above playbook with dictionary for variables 
#
# | [root@ansiblemaster01 print_message]# cat print_message.yml
# | ---
# | 
# |   # Target section : will display where and who will run 
# |   - hosts: all
# |     user : root
# |     gather_facts: true
# |   
# |   # Variable section : to handle the string variables in this playbook
# |     vars: 
# |       file_dict:
# |         cent_6_file: '/tmp/test_file_6'
# |         cent_7_file: '/tmp/test_file_7'
# |       msg_dict:
# |         centos_6_message: ansible has just updated "{{ file_dict.cent_6_file }}" on a CentOS 6 Machine
# |         centos_7_message: ansible has just updated "{{ file_dict['cent_7_file'] }}" on a CentOS 7 machine
# | 
# |   # Handlers : This will help to notify the message 
# |     handlers: 
# |       - name: CentOS 6 Message 
# |         debug: 
# |           msg: " {{ msg_dict.centos_6_message }} "
# |       - name: CentOS 7 Message
# |         debug: 
# |           msg: " {{ msg_dict.centos_7_message }} "
# | 
# |   # Tasks section : List of tasks to execute  
# |     tasks: 
# |       - copy: 
# |           content: "{{ msg_dict.centos_6_message }}"
# |           dest: "{{ file_dict.cent_6_file }}"
# |         notify: CentOS 6 Message
# |         when: ansible_distribution_major_version  == "6"
# | 
# |       - copy: 
# |           content: "{{ msg_dict['centos_7_message'] }}"
# |           dest: "{{ file_dict['cent_7_file'] }}"
# |         notify: CentOS 7 Message
# |         when: ansible_distribution_major_version == "7"
# | ...
# | [root@ansiblemaster01 print_message]# 
# | 
#
# Example : Below is the sample run of the above playbook
#
# | [root@ansiblemaster01 print_message]# ansible-playbook print_message.yml 
# | 
# | PLAY [all] *****************************************************************************************************************************************************************************************
# | 
# | TASK [Gathering Facts] ****************************************************************************************************************************************************************************
# | ok: [dnsserver01.svr.apac.sathsang.net]
# | ok: [dockerstation01.svr.apac.sathsang.net]
# | ok: [clientnode02.svr.apac.sathsang.net]
# | ok: [clientnode03.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | 
# | TASK [copy] *****************************************************************************************************************************************************************************************
# | skipping: [clientnode03.svr.apac.sathsang.net]
# | skipping: [clientnode01.svr.apac.sathsang.net]
# | skipping: [clientnode02.svr.apac.sathsang.net]
# | changed: [dnsserver01.svr.apac.sathsang.net]
# | changed: [dockerstation01.svr.apac.sathsang.net]
# |
# | TASK [copy] ******************************************************************************************************************************************************************************************
# | skipping: [dnsserver01.svr.apac.sathsang.net]
# | skipping: [dockerstation01.svr.apac.sathsang.net]
# | changed: [clientnode03.svr.apac.sathsang.net]
# | changed: [clientnode01.svr.apac.sathsang.net]
# | changed: [clientnode02.svr.apac.sathsang.net]
# | 
# | RUNNING HANDLER [CentOS 6 Message] ********************************************************************************************************************************************************************
# | ok: [dnsserver01.svr.apac.sathsang.net] => {
# |     "msg": " ansible has just updated \"/tmp/test_file_6\" on a CentOS 6 Machine "
# | }
# | ok: [dockerstation01.svr.apac.sathsang.net] => {
# |     "msg": " ansible has just updated \"/tmp/test_file_6\" on a CentOS 6 Machine "
# | }
# | 
# | RUNNING HANDLER [CentOS 7 Message] *******************************************************************************************************************************************************************
# | ok: [clientnode03.svr.apac.sathsang.net] => {
# |     "msg": " ansible has just updated \"/tmp/test_file_7\" on a CentOS 7 machine "
# | }
# | ok: [clientnode01.svr.apac.sathsang.net] => {
# |     "msg": " ansible has just updated \"/tmp/test_file_7\" on a CentOS 7 machine "
# | }
# | ok: [clientnode02.svr.apac.sathsang.net] => {
# |     "msg": " ansible has just updated \"/tmp/test_file_7\" on a CentOS 7 machine "
# | }
# | 
# | PLAY RECAP ***********************************************************************************************************************************************************************************************
# | clientnode01.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | clientnode02.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | clientnode03.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | dnsserver01.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | dockerstation01.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | 
#
# * Sourcing variables from External YAML file 
# Similar to declaring variables within the file we can also declare variable on a external file and source the same into the main playbook. 
# This will help to keep the variable data away from the main code, if you want to change the variables then you will need to only change the data in the variable file. 
# You main playbook will be untouched to make any changes related to data. 
#
# NOTE : Below example will help us to uderstand the usage of external variable files 
#
# => Below is the external file containing the variables 
#
# | [root@ansiblemaster01 detect_file]# more external_variables.yml 
# | ---
# | 
# | # Variables needed for main playbook 
# | detect_file: '/etc/sathsang_detect'
# | host_details: 
# |   hostname : 
# |     -  "{{facter_networking.hostname}}"
# |     -  "{{facter_networking.fqdn}}"
# |     -  "{{facter_networking.domain}}"
# |   IP       : "{{facter_networking.dhcp}}"
# |   hardware : "{{facter_os.hardware}}"
# |   os_type  : "{{ansible_distribution}}"
# |   os_versn : "{{ansible_distribution_version}}"
# |   kernel   : "{{facter_kernel}}"
# |   
# | ...
#
# => Main playbook 
#
# | [root@ansiblemaster01 detect_file]# more create_detect_file.yml 
# | ---
# | -
# |   hosts : sathsang_two_infra
# |   gather_facts: true
# |   user : root
# | 
# |   vars_files: 
# |     - external_variables.yml
# | 
# |   handlers: 
# |     - name: change completed
# |       debug: 
# |         msg: created "{{ detect_file }}" file successfully 
# | 
# |   tasks: 
# |     - name : To create a "{{ detect_file }}" file 
# |       copy: 
# |         content: 
# |             hostname : "{{ host_details.hostname }}"
# |             IP       : "{{ facter_networking.dhcp }}"
# |             hardware : "{{ host_details.hardware }}"
# |             os_type  : "{{ host_details.os_type }}"
# |             os_versn : "{{ host_details.os_versn }}"
# |             kernel   : "{{ host_details.kernel }}"
# |         dest: "{{ detect_file }}"
# |       notify: change completed
# |       when : facter_kernel == "Linux"
# | ...
# | [root@ansiblemaster01 detect_file]# ansible-playbook create_detect_file.yml
# | 
# | PLAY [sathsang_two_infra] ***************************************************************************************************************************************************************************
# | 
# | TASK [Gathering Facts] ******************************************************************************************************************************************************************************
# | ok: [clientnode03.svr.apac.sathsang.net]
# | 
# | TASK [To create a "/etc/sathsang_detect" file] ******************************************************************************************************************************************************
# | changed: [clientnode03.svr.apac.sathsang.net]
# | 
# | RUNNING HANDLER [change completed] ******************************************************************************************************************************************************************
# | ok: [clientnode03.svr.apac.sathsang.net] => {
# |     "msg": "created \"/etc/sathsang_detect\" file successfully"
# | }
# | 
# | PLAY RECAP ******************************************************************************************************************************************************************************************
# | clientnode03.svr.apac.sathsang.net : ok=3    changed=1    unreachable=0    failed=0   
# | 
# | [root@ansiblemaster01 detect_file]# 
# | 
#
# => below is the output from client 
#
# | [root@clientnode03 ~]# more /etc/sathsang_detect 
# | {"kernel": "Linux", "IP": "192.168.122.1", "hostname": ["clientnode03", "clientnode03.svr.apac.sathsang.net", "svr.apac.sathsang.net"], "hardware": "x86_64", "os_versn": "7.3.1611", "os_type": "CentOS"}
# | [root@clientnode03 ~]# 
# | 
#
# * Handling variable hierarchy in Ansible 
# In puppet you might have heared about Hiera which helps you to assign variables in a hierarchichal model. 
# Similar to that in ansible also you can create hierarchichal variables using 'Groupvars' and 'Hostvars'.
#
# * Group_Vars : This will help to assign variables to one group or all hosts in the scope based on how you use the method
# . /etc/ansible/group_vars/all.yml 		=> This will hold all the common variables which can be common across every node
# . /etc/ansible/group_vars/<group_name>.yml	=> This can contain the variable details for host groups, which can be commonly applied accross that group
#
# * Host_Vars : This will help to assign variables which is specific to the hosts, you can created the variable file on below path 
# . /etc/ansible/group_vars/<host_name>.yml
#
#
# ----------------------------------------------------------------------------------------------------------------------------------------
# Chapter 07 : Creating custom facts in ansible 
# ----------------------------------------------------------------------------------------------------------------------------------------
# If you want to create a custom facts in ansible then you will need to write a script in shell, perl or python which given you the output in Json format
# You should always make sure the custom facts are placed in the "/etc/ansible/facts.d/ location. 
# This is the default location where ansible looks for the custom facts, though you can mention other location and direct ansible to look at that path. 
#
# . Path : /etc/ansible/facts.d/
# . facts variable : ansible_local
#
# Example Below is sample play book where we written the custom facts. 
#
# | [root@ansiblemaster01 facter_testing]# cat  /etc/ansible/facts.d/logged_user.sh 
# | #!/bin/bash
# | logged_user=$(who am i|awk '{print $1}')
# | echo {\""logged_user\"": \"$logged_user\"}
# | [root@ansiblemaster01 facter_testing]# 
#
#
# | [root@ansiblemaster01 facter_testing]# more facts_testing.yml 
# | ---
# | - hosts: sathsang_one_infra
# |   user: root 
# |   gather_facts: true
# | 
# |   vars: 
# |     file: /etc/ansible/facts.d/logged_user.sh
# | 
# |   handlers: 
# |   - name: file_copy_notifier
# |     debug: 
# |       msg: "{{ file }} copied "
# | 
# |   tasks: 
# |   - name: create directory 
# |     file:
# |       path: /etc/ansible/facts.d
# |       recurse: yes
# |       state: directory
# |   
# |   - name: copying facts 
# |     copy: 
# |       src: "{{ file }}"
# |       dest: "{{ file }}"
# |       mode: 0755
# |     notify: file_copy_notifier
# | 
# |   - name: refresh facts
# |     setup: 
# | 
# |   - name: printing new facts
# |     debug: 
# |       msg: "local facts available are : {{ ansible_local }}"
# | ...
# | [root@ansiblemaster01 facter_testing]# 
#
#
# | [root@ansiblemaster01 facter_testing]# ansible-playbook facts_testing.yml 
# | 
# | PLAY [sathsang_one_infra] ********************************************************************************************************************************************************************
# | 
# | TASK [Gathering Facts] ***********************************************************************************************************************************************************************
# | ok: [clientnode02.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | 
# | TASK [create directory] **********************************************************************************************************************************************************************
# | ok: [clientnode02.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | 
# | TASK [copying facts] *************************************************************************************************************************************************************************
# | changed: [clientnode01.svr.apac.sathsang.net]
# | changed: [clientnode02.svr.apac.sathsang.net]
# | 
# | TASK [refresh facts] *************************************************************************************************************************************************************************
# | ok: [clientnode02.svr.apac.sathsang.net]
# | ok: [clientnode01.svr.apac.sathsang.net]
# | 
# | TASK [printing new facts] ********************************************************************************************************************************************************************
# | ok: [clientnode01.svr.apac.sathsang.net] => {
# |     "msg": "local facts available are : {}"
# | }
# | ok: [clientnode02.svr.apac.sathsang.net] => {
# |     "msg": "local facts available are : {}"
# | }
# | 
# | RUNNING HANDLER [file_copy_notifier] *********************************************************************************************************************************************************
# | ok: [clientnode01.svr.apac.sathsang.net] => {
# |     "msg": "/etc/ansible/facts.d/logged_user.sh copied "
# | }
# | ok: [clientnode02.svr.apac.sathsang.net] => {
# |     "msg": "/etc/ansible/facts.d/logged_user.sh copied "
# | }
# | 
# | PLAY RECAP ***********************************************************************************************************************************************************************************
# | clientnode01.svr.apac.sathsang.net : ok=6    changed=1    unreachable=0    failed=0   
# | clientnode02.svr.apac.sathsang.net : ok=6    changed=1    unreachable=0    failed=0   
# | 
# | [root@ansiblemaster01 facter_testing]# 
# | 
#
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
# For Code reference for all Ansible topics Refer : https://github.com/spurin/masteringansible
#
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
